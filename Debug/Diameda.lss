
Diameda.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00803e00  00000c48  00000cdc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  00803e06  00803e06  00000ce2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ce2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000448  00000000  00000000  00000d50  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006613  00000000  00000000  00001198  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000027d5  00000000  00000000  000077ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f3c  00000000  00000000  00009f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000844  00000000  00000000  0000bebc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002903  00000000  00000000  0000c700  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f45  00000000  00000000  0000f003  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000358  00000000  00000000  0000ff48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	5b c0       	rjmp	.+182    	; 0xb8 <__ctors_end>
   2:	75 c0       	rjmp	.+234    	; 0xee <__bad_interrupt>
   4:	74 c0       	rjmp	.+232    	; 0xee <__bad_interrupt>
   6:	4d c1       	rjmp	.+666    	; 0x2a2 <__vector_3>
   8:	72 c0       	rjmp	.+228    	; 0xee <__bad_interrupt>
   a:	71 c0       	rjmp	.+226    	; 0xee <__bad_interrupt>
   c:	81 c0       	rjmp	.+258    	; 0x110 <__vector_6>
   e:	6f c0       	rjmp	.+222    	; 0xee <__bad_interrupt>
  10:	24 c4       	rjmp	.+2120   	; 0x85a <__vector_8>
  12:	6d c0       	rjmp	.+218    	; 0xee <__bad_interrupt>
  14:	6c c0       	rjmp	.+216    	; 0xee <__bad_interrupt>
  16:	6b c0       	rjmp	.+214    	; 0xee <__bad_interrupt>
  18:	6a c0       	rjmp	.+212    	; 0xee <__bad_interrupt>
  1a:	96 c0       	rjmp	.+300    	; 0x148 <__vector_13>
  1c:	68 c0       	rjmp	.+208    	; 0xee <__bad_interrupt>
  1e:	a3 c0       	rjmp	.+326    	; 0x166 <__vector_15>
  20:	66 c0       	rjmp	.+204    	; 0xee <__bad_interrupt>
  22:	3c c3       	rjmp	.+1656   	; 0x69c <__vector_17>
  24:	64 c0       	rjmp	.+200    	; 0xee <__bad_interrupt>
  26:	63 c0       	rjmp	.+198    	; 0xee <__bad_interrupt>
  28:	62 c0       	rjmp	.+196    	; 0xee <__bad_interrupt>
  2a:	61 c0       	rjmp	.+194    	; 0xee <__bad_interrupt>
  2c:	e2 c0       	rjmp	.+452    	; 0x1f2 <__vector_22>
  2e:	5f c0       	rjmp	.+190    	; 0xee <__bad_interrupt>
  30:	5e c0       	rjmp	.+188    	; 0xee <__bad_interrupt>
  32:	5d c0       	rjmp	.+186    	; 0xee <__bad_interrupt>
  34:	bc c2       	rjmp	.+1400   	; 0x5ae <checkCMD+0x2e>
  36:	bb c2       	rjmp	.+1398   	; 0x5ae <checkCMD+0x2e>
  38:	ba c2       	rjmp	.+1396   	; 0x5ae <checkCMD+0x2e>
  3a:	b9 c2       	rjmp	.+1394   	; 0x5ae <checkCMD+0x2e>
  3c:	b8 c2       	rjmp	.+1392   	; 0x5ae <checkCMD+0x2e>
  3e:	b7 c2       	rjmp	.+1390   	; 0x5ae <checkCMD+0x2e>
  40:	b6 c2       	rjmp	.+1388   	; 0x5ae <checkCMD+0x2e>
  42:	b5 c2       	rjmp	.+1386   	; 0x5ae <checkCMD+0x2e>
  44:	b4 c2       	rjmp	.+1384   	; 0x5ae <checkCMD+0x2e>
  46:	b3 c2       	rjmp	.+1382   	; 0x5ae <checkCMD+0x2e>
  48:	b2 c2       	rjmp	.+1380   	; 0x5ae <checkCMD+0x2e>
  4a:	b1 c2       	rjmp	.+1378   	; 0x5ae <checkCMD+0x2e>
  4c:	a7 c2       	rjmp	.+1358   	; 0x59c <checkCMD+0x1c>
  4e:	af c2       	rjmp	.+1374   	; 0x5ae <checkCMD+0x2e>
  50:	ae c2       	rjmp	.+1372   	; 0x5ae <checkCMD+0x2e>
  52:	ad c2       	rjmp	.+1370   	; 0x5ae <checkCMD+0x2e>
  54:	ac c2       	rjmp	.+1368   	; 0x5ae <checkCMD+0x2e>
  56:	a8 c2       	rjmp	.+1360   	; 0x5a8 <checkCMD+0x28>
  58:	a7 c2       	rjmp	.+1358   	; 0x5a8 <checkCMD+0x28>
  5a:	a6 c2       	rjmp	.+1356   	; 0x5a8 <checkCMD+0x28>
  5c:	a5 c2       	rjmp	.+1354   	; 0x5a8 <checkCMD+0x28>
  5e:	a4 c2       	rjmp	.+1352   	; 0x5a8 <checkCMD+0x28>
  60:	a3 c2       	rjmp	.+1350   	; 0x5a8 <checkCMD+0x28>
  62:	a5 c2       	rjmp	.+1354   	; 0x5ae <checkCMD+0x2e>
  64:	a4 c2       	rjmp	.+1352   	; 0x5ae <checkCMD+0x2e>
  66:	a3 c2       	rjmp	.+1350   	; 0x5ae <checkCMD+0x2e>
  68:	a2 c2       	rjmp	.+1348   	; 0x5ae <checkCMD+0x2e>
  6a:	a1 c2       	rjmp	.+1346   	; 0x5ae <checkCMD+0x2e>
  6c:	a0 c2       	rjmp	.+1344   	; 0x5ae <checkCMD+0x2e>
  6e:	9f c2       	rjmp	.+1342   	; 0x5ae <checkCMD+0x2e>
  70:	9e c2       	rjmp	.+1340   	; 0x5ae <checkCMD+0x2e>
  72:	9d c2       	rjmp	.+1338   	; 0x5ae <checkCMD+0x2e>
  74:	9c c2       	rjmp	.+1336   	; 0x5ae <checkCMD+0x2e>
  76:	9b c2       	rjmp	.+1334   	; 0x5ae <checkCMD+0x2e>
  78:	93 c2       	rjmp	.+1318   	; 0x5a0 <checkCMD+0x20>
  7a:	99 c2       	rjmp	.+1330   	; 0x5ae <checkCMD+0x2e>
  7c:	98 c2       	rjmp	.+1328   	; 0x5ae <checkCMD+0x2e>
  7e:	97 c2       	rjmp	.+1326   	; 0x5ae <checkCMD+0x2e>
  80:	96 c2       	rjmp	.+1324   	; 0x5ae <checkCMD+0x2e>
  82:	95 c2       	rjmp	.+1322   	; 0x5ae <checkCMD+0x2e>
  84:	94 c2       	rjmp	.+1320   	; 0x5ae <checkCMD+0x2e>
  86:	8e c2       	rjmp	.+1308   	; 0x5a4 <checkCMD+0x24>
  88:	92 c2       	rjmp	.+1316   	; 0x5ae <checkCMD+0x2e>
  8a:	8e c2       	rjmp	.+1308   	; 0x5a8 <checkCMD+0x28>
  8c:	90 c2       	rjmp	.+1312   	; 0x5ae <checkCMD+0x2e>
  8e:	8f c2       	rjmp	.+1310   	; 0x5ae <checkCMD+0x2e>
  90:	8e c2       	rjmp	.+1308   	; 0x5ae <checkCMD+0x2e>
  92:	8d c2       	rjmp	.+1306   	; 0x5ae <checkCMD+0x2e>
  94:	8c c2       	rjmp	.+1304   	; 0x5ae <checkCMD+0x2e>
  96:	8b c2       	rjmp	.+1302   	; 0x5ae <checkCMD+0x2e>
  98:	8a c2       	rjmp	.+1300   	; 0x5ae <checkCMD+0x2e>
  9a:	89 c2       	rjmp	.+1298   	; 0x5ae <checkCMD+0x2e>
  9c:	88 c2       	rjmp	.+1296   	; 0x5ae <checkCMD+0x2e>
  9e:	87 c2       	rjmp	.+1294   	; 0x5ae <checkCMD+0x2e>
  a0:	86 c2       	rjmp	.+1292   	; 0x5ae <checkCMD+0x2e>
  a2:	85 c2       	rjmp	.+1290   	; 0x5ae <checkCMD+0x2e>
  a4:	84 c2       	rjmp	.+1288   	; 0x5ae <checkCMD+0x2e>
  a6:	83 c2       	rjmp	.+1286   	; 0x5ae <checkCMD+0x2e>
  a8:	82 c2       	rjmp	.+1284   	; 0x5ae <checkCMD+0x2e>
  aa:	81 c2       	rjmp	.+1282   	; 0x5ae <checkCMD+0x2e>
  ac:	80 c2       	rjmp	.+1280   	; 0x5ae <checkCMD+0x2e>
  ae:	7f c2       	rjmp	.+1278   	; 0x5ae <checkCMD+0x2e>
  b0:	7e c2       	rjmp	.+1276   	; 0x5ae <checkCMD+0x2e>
  b2:	7d c2       	rjmp	.+1274   	; 0x5ae <checkCMD+0x2e>
  b4:	7c c2       	rjmp	.+1272   	; 0x5ae <checkCMD+0x2e>
  b6:	7b c2       	rjmp	.+1270   	; 0x5ae <checkCMD+0x2e>

000000b8 <__ctors_end>:
  b8:	11 24       	eor	r1, r1
  ba:	1f be       	out	0x3f, r1	; 63
  bc:	cf ef       	ldi	r28, 0xFF	; 255
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	df e3       	ldi	r29, 0x3F	; 63
  c2:	de bf       	out	0x3e, r29	; 62

000000c4 <__do_clear_bss>:
  c4:	2e e3       	ldi	r18, 0x3E	; 62
  c6:	a6 e0       	ldi	r26, 0x06	; 6
  c8:	be e3       	ldi	r27, 0x3E	; 62
  ca:	01 c0       	rjmp	.+2      	; 0xce <.do_clear_bss_start>

000000cc <.do_clear_bss_loop>:
  cc:	1d 92       	st	X+, r1

000000ce <.do_clear_bss_start>:
  ce:	a1 32       	cpi	r26, 0x21	; 33
  d0:	b2 07       	cpc	r27, r18
  d2:	e1 f7       	brne	.-8      	; 0xcc <.do_clear_bss_loop>

000000d4 <__do_copy_data>:
  d4:	1e e3       	ldi	r17, 0x3E	; 62
  d6:	a0 e0       	ldi	r26, 0x00	; 0
  d8:	be e3       	ldi	r27, 0x3E	; 62
  da:	e8 e4       	ldi	r30, 0x48	; 72
  dc:	fc e0       	ldi	r31, 0x0C	; 12
  de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
  e0:	05 90       	lpm	r0, Z+
  e2:	0d 92       	st	X+, r0
  e4:	a6 30       	cpi	r26, 0x06	; 6
  e6:	b1 07       	cpc	r27, r17
  e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>
  ea:	63 d2       	rcall	.+1222   	; 0x5b2 <main>
  ec:	ab c5       	rjmp	.+2902   	; 0xc44 <_exit>

000000ee <__bad_interrupt>:
  ee:	88 cf       	rjmp	.-240    	; 0x0 <__vectors>

000000f0 <atmel_start_init>:
  f0:	6d d3       	rcall	.+1754   	; 0x7cc <system_init>
  f2:	08 95       	ret

000000f4 <calculateChecksum>:
  f4:	fc 01       	movw	r30, r24
  f6:	68 17       	cp	r22, r24
  f8:	79 07       	cpc	r23, r25
  fa:	38 f0       	brcs	.+14     	; 0x10a <calculateChecksum+0x16>
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	91 91       	ld	r25, Z+
 100:	89 0f       	add	r24, r25
 102:	6e 17       	cp	r22, r30
 104:	7f 07       	cpc	r23, r31
 106:	d8 f7       	brcc	.-10     	; 0xfe <calculateChecksum+0xa>
 108:	01 c0       	rjmp	.+2      	; 0x10c <calculateChecksum+0x18>
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	81 95       	neg	r24
 10e:	08 95       	ret

00000110 <__vector_6>:
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
 11c:	ef 93       	push	r30
 11e:	ff 93       	push	r31
 120:	80 91 08 3e 	lds	r24, 0x3E08	; 0x803e08 <received>
 124:	81 11       	cpse	r24, r1
 126:	05 c0       	rjmp	.+10     	; 0x132 <__vector_6+0x22>
 128:	e0 e4       	ldi	r30, 0x40	; 64
 12a:	f1 e0       	ldi	r31, 0x01	; 1
 12c:	80 81       	ld	r24, Z
 12e:	8e 7f       	andi	r24, 0xFE	; 254
 130:	80 83       	st	Z, r24
 132:	82 e0       	ldi	r24, 0x02	; 2
 134:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__RODATA_PM_OFFSET__+0x7f8143>
 138:	ff 91       	pop	r31
 13a:	ef 91       	pop	r30
 13c:	8f 91       	pop	r24
 13e:	0f 90       	pop	r0
 140:	0f be       	out	0x3f, r0	; 63
 142:	0f 90       	pop	r0
 144:	1f 90       	pop	r1
 146:	18 95       	reti

00000148 <__vector_13>:
 148:	1f 92       	push	r1
 14a:	0f 92       	push	r0
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	0f 92       	push	r0
 150:	11 24       	eor	r1, r1
 152:	8f 93       	push	r24
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	80 93 46 0a 	sts	0x0A46, r24	; 0x800a46 <__RODATA_PM_OFFSET__+0x7f8a46>
 15a:	8f 91       	pop	r24
 15c:	0f 90       	pop	r0
 15e:	0f be       	out	0x3f, r0	; 63
 160:	0f 90       	pop	r0
 162:	1f 90       	pop	r1
 164:	18 95       	reti

00000166 <__vector_15>:
 166:	1f 92       	push	r1
 168:	0f 92       	push	r0
 16a:	0f b6       	in	r0, 0x3f	; 63
 16c:	0f 92       	push	r0
 16e:	11 24       	eor	r1, r1
 170:	8f 93       	push	r24
 172:	8c e0       	ldi	r24, 0x0C	; 12
 174:	80 93 8d 0a 	sts	0x0A8D, r24	; 0x800a8d <__RODATA_PM_OFFSET__+0x7f8a8d>
 178:	8f 91       	pop	r24
 17a:	0f 90       	pop	r0
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	0f 90       	pop	r0
 180:	1f 90       	pop	r1
 182:	18 95       	reti

00000184 <checkCHKSUM>:
		
		
	}
	

}
 184:	cf 93       	push	r28
 186:	80 91 09 3e 	lds	r24, 0x3E09	; 0x803e09 <read>
 18a:	90 91 0a 3e 	lds	r25, 0x3E0A	; 0x803e0a <read+0x1>
 18e:	fc 01       	movw	r30, r24
 190:	62 81       	ldd	r22, Z+2	; 0x02
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	e6 0f       	add	r30, r22
 196:	f7 1f       	adc	r31, r23
 198:	c3 81       	ldd	r28, Z+3	; 0x03
 19a:	6e 5f       	subi	r22, 0xFE	; 254
 19c:	7f 4f       	sbci	r23, 0xFF	; 255
 19e:	68 0f       	add	r22, r24
 1a0:	79 1f       	adc	r23, r25
 1a2:	01 96       	adiw	r24, 0x01	; 1
 1a4:	a7 df       	rcall	.-178    	; 0xf4 <calculateChecksum>
 1a6:	c8 17       	cp	r28, r24
 1a8:	29 f0       	breq	.+10     	; 0x1b4 <checkCHKSUM+0x30>
 1aa:	82 e0       	ldi	r24, 0x02	; 2
 1ac:	80 93 1a 3e 	sts	0x3E1A, r24	; 0x803e1a <parameters+0x7>
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <checkCHKSUM+0x32>
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	cf 91       	pop	r28
 1b8:	08 95       	ret

000001ba <readReset>:
 1ba:	80 91 09 3e 	lds	r24, 0x3E09	; 0x803e09 <read>
 1be:	90 91 0a 3e 	lds	r25, 0x3E0A	; 0x803e0a <read+0x1>
 1c2:	b0 d4       	rcall	.+2400   	; 0xb24 <free>
 1c4:	10 92 0b 3e 	sts	0x3E0B, r1	; 0x803e0b <index_read>
 1c8:	10 92 08 3e 	sts	0x3E08, r1	; 0x803e08 <received>
 1cc:	10 92 07 3e 	sts	0x3E07, r1	; 0x803e07 <memoryAllocated>
 1d0:	08 95       	ret

000001d2 <setVolume>:
 1d2:	e0 91 09 3e 	lds	r30, 0x3E09	; 0x803e09 <read>
 1d6:	f0 91 0a 3e 	lds	r31, 0x3E0A	; 0x803e0a <read+0x1>
 1da:	85 81       	ldd	r24, Z+5	; 0x05
 1dc:	80 93 17 3e 	sts	0x3E17, r24	; 0x803e17 <parameters+0x4>
 1e0:	08 95       	ret

000001e2 <batteryRead>:
 1e2:	e0 91 09 3e 	lds	r30, 0x3E09	; 0x803e09 <read>
 1e6:	f0 91 0a 3e 	lds	r31, 0x3E0A	; 0x803e0a <read+0x1>
 1ea:	84 81       	ldd	r24, Z+4	; 0x04
 1ec:	80 93 19 3e 	sts	0x3E19, r24	; 0x803e19 <parameters+0x6>
 1f0:	08 95       	ret

000001f2 <__vector_22>:
 1f2:	1f 92       	push	r1
 1f4:	0f 92       	push	r0
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	0f 92       	push	r0
 1fa:	11 24       	eor	r1, r1
 1fc:	2f 93       	push	r18
 1fe:	3f 93       	push	r19
 200:	4f 93       	push	r20
 202:	5f 93       	push	r21
 204:	6f 93       	push	r22
 206:	7f 93       	push	r23
 208:	8f 93       	push	r24
 20a:	9f 93       	push	r25
 20c:	af 93       	push	r26
 20e:	bf 93       	push	r27
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	ef 93       	push	r30
 216:	ff 93       	push	r31
 218:	80 91 07 3e 	lds	r24, 0x3E07	; 0x803e07 <memoryAllocated>
 21c:	81 11       	cpse	r24, r1
 21e:	0c c0       	rjmp	.+24     	; 0x238 <__DATA_REGION_LENGTH__+0x38>
 220:	61 e0       	ldi	r22, 0x01	; 1
 222:	70 e0       	ldi	r23, 0x00	; 0
 224:	80 e2       	ldi	r24, 0x20	; 32
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	cb d3       	rcall	.+1942   	; 0x9c0 <calloc>
 22a:	80 93 09 3e 	sts	0x3E09, r24	; 0x803e09 <read>
 22e:	90 93 0a 3e 	sts	0x3E0A, r25	; 0x803e0a <read+0x1>
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	80 93 07 3e 	sts	0x3E07, r24	; 0x803e07 <memoryAllocated>
 238:	c0 91 09 3e 	lds	r28, 0x3E09	; 0x803e09 <read>
 23c:	d0 91 0a 3e 	lds	r29, 0x3E0A	; 0x803e0a <read+0x1>
 240:	88 81       	ld	r24, Y
 242:	8a 3a       	cpi	r24, 0xAA	; 170
 244:	a1 f4       	brne	.+40     	; 0x26e <__DATA_REGION_LENGTH__+0x6e>
 246:	80 91 0b 3e 	lds	r24, 0x3E0B	; 0x803e0b <index_read>
 24a:	8f 5f       	subi	r24, 0xFF	; 255
 24c:	80 93 0b 3e 	sts	0x3E0B, r24	; 0x803e0b <index_read>
 250:	80 91 0b 3e 	lds	r24, 0x3E0B	; 0x803e0b <index_read>
 254:	c8 0f       	add	r28, r24
 256:	d1 1d       	adc	r29, r1
 258:	59 d3       	rcall	.+1714   	; 0x90c <USART_0_read>
 25a:	88 83       	st	Y, r24
 25c:	80 91 08 3e 	lds	r24, 0x3E08	; 0x803e08 <received>
 260:	81 11       	cpse	r24, r1
 262:	07 c0       	rjmp	.+14     	; 0x272 <__DATA_REGION_LENGTH__+0x72>
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	80 93 08 3e 	sts	0x3E08, r24	; 0x803e08 <received>
 26a:	0b d3       	rcall	.+1558   	; 0x882 <RTC_init>
 26c:	02 c0       	rjmp	.+4      	; 0x272 <__DATA_REGION_LENGTH__+0x72>
 26e:	4e d3       	rcall	.+1692   	; 0x90c <USART_0_read>
 270:	88 83       	st	Y, r24
 272:	80 91 0b 3e 	lds	r24, 0x3E0B	; 0x803e0b <index_read>
 276:	8f 31       	cpi	r24, 0x1F	; 31
 278:	08 f0       	brcs	.+2      	; 0x27c <__DATA_REGION_LENGTH__+0x7c>
 27a:	9f df       	rcall	.-194    	; 0x1ba <readReset>
 27c:	ff 91       	pop	r31
 27e:	ef 91       	pop	r30
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	bf 91       	pop	r27
 286:	af 91       	pop	r26
 288:	9f 91       	pop	r25
 28a:	8f 91       	pop	r24
 28c:	7f 91       	pop	r23
 28e:	6f 91       	pop	r22
 290:	5f 91       	pop	r21
 292:	4f 91       	pop	r20
 294:	3f 91       	pop	r19
 296:	2f 91       	pop	r18
 298:	0f 90       	pop	r0
 29a:	0f be       	out	0x3f, r0	; 63
 29c:	0f 90       	pop	r0
 29e:	1f 90       	pop	r1
 2a0:	18 95       	reti

000002a2 <__vector_3>:
 2a2:	1f 92       	push	r1
 2a4:	0f 92       	push	r0
 2a6:	0f b6       	in	r0, 0x3f	; 63
 2a8:	0f 92       	push	r0
 2aa:	11 24       	eor	r1, r1
 2ac:	8f 93       	push	r24
 2ae:	ef 93       	push	r30
 2b0:	ff 93       	push	r31
 2b2:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__RODATA_PM_OFFSET__+0x7f8409>
 2b6:	88 23       	and	r24, r24
 2b8:	44 f4       	brge	.+16     	; 0x2ca <__vector_3+0x28>
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	80 93 06 3e 	sts	0x3E06, r24	; 0x803e06 <__data_end>
 2c0:	e9 e0       	ldi	r30, 0x09	; 9
 2c2:	f4 e0       	ldi	r31, 0x04	; 4
 2c4:	80 81       	ld	r24, Z
 2c6:	80 68       	ori	r24, 0x80	; 128
 2c8:	80 83       	st	Z, r24
 2ca:	ff 91       	pop	r31
 2cc:	ef 91       	pop	r30
 2ce:	8f 91       	pop	r24
 2d0:	0f 90       	pop	r0
 2d2:	0f be       	out	0x3f, r0	; 63
 2d4:	0f 90       	pop	r0
 2d6:	1f 90       	pop	r1
 2d8:	18 95       	reti

000002da <execute>:
 2da:	ef 92       	push	r14
 2dc:	ff 92       	push	r15
 2de:	0f 93       	push	r16
 2e0:	1f 93       	push	r17
 2e2:	cf 93       	push	r28
 2e4:	df 93       	push	r29
 2e6:	10 92 20 0a 	sts	0x0A20, r1	; 0x800a20 <__RODATA_PM_OFFSET__+0x7f8a20>
 2ea:	10 92 21 0a 	sts	0x0A21, r1	; 0x800a21 <__RODATA_PM_OFFSET__+0x7f8a21>
 2ee:	10 92 4a 0a 	sts	0x0A4A, r1	; 0x800a4a <__RODATA_PM_OFFSET__+0x7f8a4a>
 2f2:	10 92 4b 0a 	sts	0x0A4B, r1	; 0x800a4b <__RODATA_PM_OFFSET__+0x7f8a4b>
 2f6:	80 91 13 3e 	lds	r24, 0x3E13	; 0x803e13 <parameters>
 2fa:	82 30       	cpi	r24, 0x02	; 2
 2fc:	09 f4       	brne	.+2      	; 0x300 <execute+0x26>
 2fe:	80 c0       	rjmp	.+256    	; 0x400 <__LOCK_REGION_LENGTH__>
 300:	30 f4       	brcc	.+12     	; 0x30e <execute+0x34>
 302:	88 23       	and	r24, r24
 304:	09 f4       	brne	.+2      	; 0x308 <execute+0x2e>
 306:	7c c0       	rjmp	.+248    	; 0x400 <__LOCK_REGION_LENGTH__>
 308:	81 30       	cpi	r24, 0x01	; 1
 30a:	39 f0       	breq	.+14     	; 0x31a <execute+0x40>
 30c:	76 c0       	rjmp	.+236    	; 0x3fa <execute+0x120>
 30e:	83 30       	cpi	r24, 0x03	; 3
 310:	19 f1       	breq	.+70     	; 0x358 <execute+0x7e>
 312:	84 30       	cpi	r24, 0x04	; 4
 314:	09 f4       	brne	.+2      	; 0x318 <execute+0x3e>
 316:	53 c0       	rjmp	.+166    	; 0x3be <execute+0xe4>
 318:	70 c0       	rjmp	.+224    	; 0x3fa <execute+0x120>
 31a:	03 e0       	ldi	r16, 0x03	; 3
 31c:	10 e0       	ldi	r17, 0x00	; 0
 31e:	c0 e4       	ldi	r28, 0x40	; 64
 320:	da e0       	ldi	r29, 0x0A	; 10
 322:	6e d2       	rcall	.+1244   	; 0x800 <PWM_0_enable_output_ch0>
 324:	88 81       	ld	r24, Y
 326:	81 60       	ori	r24, 0x01	; 1
 328:	88 83       	st	Y, r24
 32a:	25 e1       	ldi	r18, 0x15	; 21
 32c:	86 e1       	ldi	r24, 0x16	; 22
 32e:	95 e0       	ldi	r25, 0x05	; 5
 330:	21 50       	subi	r18, 0x01	; 1
 332:	80 40       	sbci	r24, 0x00	; 0
 334:	90 40       	sbci	r25, 0x00	; 0
 336:	e1 f7       	brne	.-8      	; 0x330 <execute+0x56>
 338:	69 d2       	rcall	.+1234   	; 0x80c <PWM_0_disable_output_ch0>
 33a:	88 81       	ld	r24, Y
 33c:	8e 7f       	andi	r24, 0xFE	; 254
 33e:	88 83       	st	Y, r24
 340:	ea e2       	ldi	r30, 0x2A	; 42
 342:	fc e2       	ldi	r31, 0x2C	; 44
 344:	2a e0       	ldi	r18, 0x0A	; 10
 346:	e1 50       	subi	r30, 0x01	; 1
 348:	f0 40       	sbci	r31, 0x00	; 0
 34a:	20 40       	sbci	r18, 0x00	; 0
 34c:	e1 f7       	brne	.-8      	; 0x346 <execute+0x6c>
 34e:	00 00       	nop
 350:	01 50       	subi	r16, 0x01	; 1
 352:	11 09       	sbc	r17, r1
 354:	31 f7       	brne	.-52     	; 0x322 <execute+0x48>
 356:	54 c0       	rjmp	.+168    	; 0x400 <__LOCK_REGION_LENGTH__>
 358:	65 d2       	rcall	.+1226   	; 0x824 <PWM_0_enable_output_ch2>
 35a:	c0 e4       	ldi	r28, 0x40	; 64
 35c:	da e0       	ldi	r29, 0x0A	; 10
 35e:	88 81       	ld	r24, Y
 360:	81 60       	ori	r24, 0x01	; 1
 362:	88 83       	st	Y, r24
 364:	8a e2       	ldi	r24, 0x2A	; 42
 366:	9c e2       	ldi	r25, 0x2C	; 44
 368:	ea e0       	ldi	r30, 0x0A	; 10
 36a:	81 50       	subi	r24, 0x01	; 1
 36c:	90 40       	sbci	r25, 0x00	; 0
 36e:	e0 40       	sbci	r30, 0x00	; 0
 370:	e1 f7       	brne	.-8      	; 0x36a <execute+0x90>
 372:	00 00       	nop
 374:	5d d2       	rcall	.+1210   	; 0x830 <PWM_0_disable_output_ch2>
 376:	88 81       	ld	r24, Y
 378:	8e 7f       	andi	r24, 0xFE	; 254
 37a:	88 83       	st	Y, r24
 37c:	fa e2       	ldi	r31, 0x2A	; 42
 37e:	2c e2       	ldi	r18, 0x2C	; 44
 380:	8a e0       	ldi	r24, 0x0A	; 10
 382:	f1 50       	subi	r31, 0x01	; 1
 384:	20 40       	sbci	r18, 0x00	; 0
 386:	80 40       	sbci	r24, 0x00	; 0
 388:	e1 f7       	brne	.-8      	; 0x382 <execute+0xa8>
 38a:	00 00       	nop
 38c:	4b d2       	rcall	.+1174   	; 0x824 <PWM_0_enable_output_ch2>
 38e:	88 81       	ld	r24, Y
 390:	81 60       	ori	r24, 0x01	; 1
 392:	88 83       	st	Y, r24
 394:	9a e2       	ldi	r25, 0x2A	; 42
 396:	ec e2       	ldi	r30, 0x2C	; 44
 398:	fa e0       	ldi	r31, 0x0A	; 10
 39a:	91 50       	subi	r25, 0x01	; 1
 39c:	e0 40       	sbci	r30, 0x00	; 0
 39e:	f0 40       	sbci	r31, 0x00	; 0
 3a0:	e1 f7       	brne	.-8      	; 0x39a <execute+0xc0>
 3a2:	00 00       	nop
 3a4:	45 d2       	rcall	.+1162   	; 0x830 <PWM_0_disable_output_ch2>
 3a6:	88 81       	ld	r24, Y
 3a8:	8e 7f       	andi	r24, 0xFE	; 254
 3aa:	88 83       	st	Y, r24
 3ac:	2a e2       	ldi	r18, 0x2A	; 42
 3ae:	8c e2       	ldi	r24, 0x2C	; 44
 3b0:	9a e0       	ldi	r25, 0x0A	; 10
 3b2:	21 50       	subi	r18, 0x01	; 1
 3b4:	80 40       	sbci	r24, 0x00	; 0
 3b6:	90 40       	sbci	r25, 0x00	; 0
 3b8:	e1 f7       	brne	.-8      	; 0x3b2 <execute+0xd8>
 3ba:	00 00       	nop
 3bc:	21 c0       	rjmp	.+66     	; 0x400 <__LOCK_REGION_LENGTH__>
 3be:	0f 2e       	mov	r0, r31
 3c0:	f5 e0       	ldi	r31, 0x05	; 5
 3c2:	ef 2e       	mov	r14, r31
 3c4:	f4 e0       	ldi	r31, 0x04	; 4
 3c6:	ff 2e       	mov	r15, r31
 3c8:	f0 2d       	mov	r31, r0
 3ca:	c0 e8       	ldi	r28, 0x80	; 128
 3cc:	06 e0       	ldi	r16, 0x06	; 6
 3ce:	14 e0       	ldi	r17, 0x04	; 4
 3d0:	17 d2       	rcall	.+1070   	; 0x800 <PWM_0_enable_output_ch0>
 3d2:	f7 01       	movw	r30, r14
 3d4:	c0 83       	st	Z, r28
 3d6:	f5 e1       	ldi	r31, 0x15	; 21
 3d8:	26 e1       	ldi	r18, 0x16	; 22
 3da:	85 e0       	ldi	r24, 0x05	; 5
 3dc:	f1 50       	subi	r31, 0x01	; 1
 3de:	20 40       	sbci	r18, 0x00	; 0
 3e0:	80 40       	sbci	r24, 0x00	; 0
 3e2:	e1 f7       	brne	.-8      	; 0x3dc <execute+0x102>
 3e4:	13 d2       	rcall	.+1062   	; 0x80c <PWM_0_disable_output_ch0>
 3e6:	f8 01       	movw	r30, r16
 3e8:	c0 83       	st	Z, r28
 3ea:	f5 e1       	ldi	r31, 0x15	; 21
 3ec:	26 e1       	ldi	r18, 0x16	; 22
 3ee:	85 e0       	ldi	r24, 0x05	; 5
 3f0:	f1 50       	subi	r31, 0x01	; 1
 3f2:	20 40       	sbci	r18, 0x00	; 0
 3f4:	80 40       	sbci	r24, 0x00	; 0
 3f6:	e1 f7       	brne	.-8      	; 0x3f0 <execute+0x116>
 3f8:	eb cf       	rjmp	.-42     	; 0x3d0 <execute+0xf6>
 3fa:	83 e0       	ldi	r24, 0x03	; 3
 3fc:	80 93 1a 3e 	sts	0x3E1A, r24	; 0x803e1a <parameters+0x7>
 400:	df 91       	pop	r29
 402:	cf 91       	pop	r28
 404:	1f 91       	pop	r17
 406:	0f 91       	pop	r16
 408:	ff 90       	pop	r15
 40a:	ef 90       	pop	r14
 40c:	08 95       	ret

0000040e <sendTest>:

void sendTest(){
 40e:	ef 92       	push	r14
 410:	ff 92       	push	r15
 412:	0f 93       	push	r16
 414:	1f 93       	push	r17
 416:	cf 93       	push	r28
 418:	df 93       	push	r29
 41a:	cd b7       	in	r28, 0x3d	; 61
 41c:	de b7       	in	r29, 0x3e	; 62
 41e:	2b 97       	sbiw	r28, 0x0b	; 11
 420:	cd bf       	out	0x3d, r28	; 61
 422:	de bf       	out	0x3e, r29	; 62
	
	uint8_t command[11];
	command[0] = 0xAA;																		//header byte 0
 424:	8a ea       	ldi	r24, 0xAA	; 170
 426:	89 83       	std	Y+1, r24	; 0x01
	command[1] = 0x00;																		//header byte 1
 428:	1a 82       	std	Y+2, r1	; 0x02
	command[2] = 0x02;																		//length
 42a:	82 e0       	ldi	r24, 0x02	; 2
 42c:	8b 83       	std	Y+3, r24	; 0x03
	command[3] = DRV_BM64_SEND_SPP_DATA_CMD;													//command ID
 42e:	82 e1       	ldi	r24, 0x12	; 18
 430:	8c 83       	std	Y+4, r24	; 0x04
	command[4] = 0x00;																		//channel index
 432:	1d 82       	std	Y+5, r1	; 0x05
	command[5] = 0x00;																		//single packet format
 434:	1e 82       	std	Y+6, r1	; 0x06
	command[6] = 0x00;																		//TOTAL length HIGH
 436:	1f 82       	std	Y+7, r1	; 0x07
	command[7] = 0x01;																		//TOTAL LENGTH LOW
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	88 87       	std	Y+8, r24	; 0x08
	command[8] = 0x00;																		//packet length HIGH
 43c:	19 86       	std	Y+9, r1	; 0x09
	command[9] = 0x01;																		//PACKET LENGTH LOW
 43e:	8a 87       	std	Y+10, r24	; 0x0a
	command[10] = 0x99;											//
 440:	89 e9       	ldi	r24, 0x99	; 153
 442:	8b 87       	std	Y+11, r24	; 0x0b
	command[11] = calculateChecksum(&command[2], &command[10]);
 444:	be 01       	movw	r22, r28
 446:	65 5f       	subi	r22, 0xF5	; 245
 448:	7f 4f       	sbci	r23, 0xFF	; 255
 44a:	ce 01       	movw	r24, r28
 44c:	03 96       	adiw	r24, 0x03	; 3
 44e:	52 de       	rcall	.-860    	; 0xf4 <calculateChecksum>
 450:	8c 87       	std	Y+12, r24	; 0x0c
	
	USART_0_write(0x00);
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	63 d2       	rcall	.+1222   	; 0x91c <USART_0_write>
 456:	8e 01       	movw	r16, r28
 458:	0f 5f       	subi	r16, 0xFF	; 255
 45a:	1f 4f       	sbci	r17, 0xFF	; 255
 45c:	7e 01       	movw	r14, r28
 45e:	8c e0       	ldi	r24, 0x0C	; 12
 460:	e8 0e       	add	r14, r24
 462:	f1 1c       	adc	r15, r1
	for (int i = 0; i < sizeof(command); i++)
	{
		USART_0_write(command[i]);
 464:	f8 01       	movw	r30, r16
 466:	81 91       	ld	r24, Z+
 468:	8f 01       	movw	r16, r30
 46a:	58 d2       	rcall	.+1200   	; 0x91c <USART_0_write>
	command[9] = 0x01;																		//PACKET LENGTH LOW
	command[10] = 0x99;											//
	command[11] = calculateChecksum(&command[2], &command[10]);
	
	USART_0_write(0x00);
	for (int i = 0; i < sizeof(command); i++)
 46c:	0e 15       	cp	r16, r14
 46e:	1f 05       	cpc	r17, r15
 470:	c9 f7       	brne	.-14     	; 0x464 <sendTest+0x56>
		USART_0_write(command[i]);
	}
	
	
	
 472:	2b 96       	adiw	r28, 0x0b	; 11
 474:	cd bf       	out	0x3d, r28	; 61
 476:	de bf       	out	0x3e, r29	; 62
 478:	df 91       	pop	r29
 47a:	cf 91       	pop	r28
 47c:	1f 91       	pop	r17
 47e:	0f 91       	pop	r16
 480:	ff 90       	pop	r15
 482:	ef 90       	pop	r14
 484:	08 95       	ret

00000486 <parseCMD>:
		run	= true;
		PORTA_INTFLAGS |= PIN7_bm;															//clear interrupt flag
	}
}

void parseCMD(void){
 486:	cf 93       	push	r28
	uint8_t position = 10;																	//flag byte offset
	if ((read[10] & 0b00000001) > 0){														//checking flagByte for appropriate flags and setting stored parameters
 488:	e0 91 09 3e 	lds	r30, 0x3E09	; 0x803e09 <read>
 48c:	f0 91 0a 3e 	lds	r31, 0x3E0A	; 0x803e0a <read+0x1>
 490:	82 85       	ldd	r24, Z+10	; 0x0a
 492:	80 ff       	sbrs	r24, 0
 494:	0a c0       	rjmp	.+20     	; 0x4aa <parseCMD+0x24>
		position++;
		if(read[position] > 0){
 496:	93 85       	ldd	r25, Z+11	; 0x0b
 498:	99 23       	and	r25, r25
 49a:	49 f0       	breq	.+18     	; 0x4ae <parseCMD+0x28>
			parameters.Mode = read[position];
 49c:	90 93 13 3e 	sts	0x3E13, r25	; 0x803e13 <parameters>
			run = true;																			//RUN condition to enable EXECUTE
 4a0:	91 e0       	ldi	r25, 0x01	; 1
 4a2:	90 93 06 3e 	sts	0x3E06, r25	; 0x803e06 <__data_end>
}

void parseCMD(void){
	uint8_t position = 10;																	//flag byte offset
	if ((read[10] & 0b00000001) > 0){														//checking flagByte for appropriate flags and setting stored parameters
		position++;
 4a6:	cb e0       	ldi	r28, 0x0B	; 11
 4a8:	03 c0       	rjmp	.+6      	; 0x4b0 <parseCMD+0x2a>
		PORTA_INTFLAGS |= PIN7_bm;															//clear interrupt flag
	}
}

void parseCMD(void){
	uint8_t position = 10;																	//flag byte offset
 4aa:	ca e0       	ldi	r28, 0x0A	; 10
 4ac:	01 c0       	rjmp	.+2      	; 0x4b0 <parseCMD+0x2a>
	if ((read[10] & 0b00000001) > 0){														//checking flagByte for appropriate flags and setting stored parameters
		position++;
 4ae:	cb e0       	ldi	r28, 0x0B	; 11
		if(read[position] > 0){
			parameters.Mode = read[position];
			run = true;																			//RUN condition to enable EXECUTE
		}
	}
	if ((read[10] & 0b00000010) > 0){
 4b0:	81 ff       	sbrs	r24, 1
 4b2:	13 c0       	rjmp	.+38     	; 0x4da <parseCMD+0x54>
		position++;
 4b4:	cf 5f       	subi	r28, 0xFF	; 255
		parameters.RLedIntensity = read[position];
 4b6:	ec 0f       	add	r30, r28
 4b8:	f1 1d       	adc	r31, r1
 4ba:	80 81       	ld	r24, Z
 4bc:	e3 e1       	ldi	r30, 0x13	; 19
 4be:	fe e3       	ldi	r31, 0x3E	; 62
 4c0:	81 83       	std	Z+1, r24	; 0x01
		PWM_0_load_duty_cycle_ch0(parameters.RLedIntensity * 65535 / 100);
 4c2:	21 81       	ldd	r18, Z+1	; 0x01
 4c4:	30 e0       	ldi	r19, 0x00	; 0
 4c6:	af ef       	ldi	r26, 0xFF	; 255
 4c8:	bf ef       	ldi	r27, 0xFF	; 255
 4ca:	4c d2       	rcall	.+1176   	; 0x964 <__umulhisi3>
 4cc:	24 e6       	ldi	r18, 0x64	; 100
 4ce:	30 e0       	ldi	r19, 0x00	; 0
 4d0:	40 e0       	ldi	r20, 0x00	; 0
 4d2:	50 e0       	ldi	r21, 0x00	; 0
 4d4:	2b d2       	rcall	.+1110   	; 0x92c <__divmodsi4>
 4d6:	c9 01       	movw	r24, r18
 4d8:	b1 d1       	rcall	.+866    	; 0x83c <PWM_0_load_duty_cycle_ch0>
	}
	if ((read[10] & 0b00000100) > 0){
 4da:	e0 91 09 3e 	lds	r30, 0x3E09	; 0x803e09 <read>
 4de:	f0 91 0a 3e 	lds	r31, 0x3E0A	; 0x803e0a <read+0x1>
 4e2:	82 85       	ldd	r24, Z+10	; 0x0a
 4e4:	82 ff       	sbrs	r24, 2
 4e6:	13 c0       	rjmp	.+38     	; 0x50e <parseCMD+0x88>
		position++;
 4e8:	cf 5f       	subi	r28, 0xFF	; 255
		parameters.GLedIntensity = read[position];
 4ea:	ec 0f       	add	r30, r28
 4ec:	f1 1d       	adc	r31, r1
 4ee:	80 81       	ld	r24, Z
 4f0:	e3 e1       	ldi	r30, 0x13	; 19
 4f2:	fe e3       	ldi	r31, 0x3E	; 62
 4f4:	82 83       	std	Z+2, r24	; 0x02
		PWM_0_load_duty_cycle_ch1(parameters.GLedIntensity * 65535 / 100);
 4f6:	22 81       	ldd	r18, Z+2	; 0x02
 4f8:	30 e0       	ldi	r19, 0x00	; 0
 4fa:	af ef       	ldi	r26, 0xFF	; 255
 4fc:	bf ef       	ldi	r27, 0xFF	; 255
 4fe:	32 d2       	rcall	.+1124   	; 0x964 <__umulhisi3>
 500:	24 e6       	ldi	r18, 0x64	; 100
 502:	30 e0       	ldi	r19, 0x00	; 0
 504:	40 e0       	ldi	r20, 0x00	; 0
 506:	50 e0       	ldi	r21, 0x00	; 0
 508:	11 d2       	rcall	.+1058   	; 0x92c <__divmodsi4>
 50a:	c9 01       	movw	r24, r18
 50c:	9c d1       	rcall	.+824    	; 0x846 <PWM_0_load_duty_cycle_ch1>
	}
	if ((read[10] & 0b00001000) > 0){
 50e:	e0 91 09 3e 	lds	r30, 0x3E09	; 0x803e09 <read>
 512:	f0 91 0a 3e 	lds	r31, 0x3E0A	; 0x803e0a <read+0x1>
 516:	82 85       	ldd	r24, Z+10	; 0x0a
 518:	83 ff       	sbrs	r24, 3
 51a:	13 c0       	rjmp	.+38     	; 0x542 <parseCMD+0xbc>
		position++;
 51c:	cf 5f       	subi	r28, 0xFF	; 255
		parameters.BLedIntensity = read[position];
 51e:	ec 0f       	add	r30, r28
 520:	f1 1d       	adc	r31, r1
 522:	80 81       	ld	r24, Z
 524:	e3 e1       	ldi	r30, 0x13	; 19
 526:	fe e3       	ldi	r31, 0x3E	; 62
 528:	83 83       	std	Z+3, r24	; 0x03
		PWM_0_load_duty_cycle_ch2(parameters.BLedIntensity * 65535 / 100);
 52a:	23 81       	ldd	r18, Z+3	; 0x03
 52c:	30 e0       	ldi	r19, 0x00	; 0
 52e:	af ef       	ldi	r26, 0xFF	; 255
 530:	bf ef       	ldi	r27, 0xFF	; 255
 532:	18 d2       	rcall	.+1072   	; 0x964 <__umulhisi3>
 534:	24 e6       	ldi	r18, 0x64	; 100
 536:	30 e0       	ldi	r19, 0x00	; 0
 538:	40 e0       	ldi	r20, 0x00	; 0
 53a:	50 e0       	ldi	r21, 0x00	; 0
 53c:	f7 d1       	rcall	.+1006   	; 0x92c <__divmodsi4>
 53e:	c9 01       	movw	r24, r18
 540:	87 d1       	rcall	.+782    	; 0x850 <PWM_0_load_duty_cycle_ch2>
	}
	if ((read[10] & 0b00010000) > 0){
 542:	e0 91 09 3e 	lds	r30, 0x3E09	; 0x803e09 <read>
 546:	f0 91 0a 3e 	lds	r31, 0x3E0A	; 0x803e0a <read+0x1>
 54a:	82 85       	ldd	r24, Z+10	; 0x0a
 54c:	84 ff       	sbrs	r24, 4
 54e:	15 c0       	rjmp	.+42     	; 0x57a <parseCMD+0xf4>
		position++;
		parameters.vibrationIntensity = read[position];
 550:	cf 5f       	subi	r28, 0xFF	; 255
 552:	ec 0f       	add	r30, r28
 554:	f1 1d       	adc	r31, r1
 556:	80 81       	ld	r24, Z
 558:	e3 e1       	ldi	r30, 0x13	; 19
 55a:	fe e3       	ldi	r31, 0x3E	; 62
 55c:	85 83       	std	Z+5, r24	; 0x05
		TCB0.CCMP = (uint16_t) parameters.vibrationIntensity * 65535 / 100;
 55e:	25 81       	ldd	r18, Z+5	; 0x05
 560:	30 e0       	ldi	r19, 0x00	; 0
 562:	af ef       	ldi	r26, 0xFF	; 255
 564:	bf ef       	ldi	r27, 0xFF	; 255
 566:	fe d1       	rcall	.+1020   	; 0x964 <__umulhisi3>
 568:	24 e6       	ldi	r18, 0x64	; 100
 56a:	30 e0       	ldi	r19, 0x00	; 0
 56c:	40 e0       	ldi	r20, 0x00	; 0
 56e:	50 e0       	ldi	r21, 0x00	; 0
 570:	dd d1       	rcall	.+954    	; 0x92c <__divmodsi4>
 572:	20 93 4c 0a 	sts	0x0A4C, r18	; 0x800a4c <__RODATA_PM_OFFSET__+0x7f8a4c>
 576:	30 93 4d 0a 	sts	0x0A4D, r19	; 0x800a4d <__RODATA_PM_OFFSET__+0x7f8a4d>
	}
	
	//sendResponse();
	sendTest();
 57a:	49 df       	rcall	.-366    	; 0x40e <sendTest>
}
 57c:	cf 91       	pop	r28
 57e:	08 95       	ret

00000580 <checkCMD>:
	}
}

void checkCMD(void){
	
	switch (read[3])
 580:	e0 91 09 3e 	lds	r30, 0x3E09	; 0x803e09 <read>
 584:	f0 91 0a 3e 	lds	r31, 0x3E0A	; 0x803e0a <read+0x1>
 588:	e3 81       	ldd	r30, Z+3	; 0x03
 58a:	8e 2f       	mov	r24, r30
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	82 34       	cpi	r24, 0x42	; 66
 590:	91 05       	cpc	r25, r1
 592:	50 f4       	brcc	.+20     	; 0x5a8 <checkCMD+0x28>
 594:	fc 01       	movw	r30, r24
 596:	e6 5e       	subi	r30, 0xE6	; 230
 598:	ff 4f       	sbci	r31, 0xFF	; 255
 59a:	09 94       	ijmp
		case 0x07: break;										//Phone_Current_Battery_Level
		case 0x08: break;										//Roaming_Status
		case 0x09: break;										//Phone_Max_Signal_Strength_Level
		case 0x0A: break;										//Phone_Current_Signal_Strength_Level
		case 0x0B: break;										//Phone_Service_Status
		case 0x0C: batteryRead(); break;						//BTM_Battery_Status
 59c:	22 de       	rcall	.-956    	; 0x1e2 <batteryRead>
 59e:	07 c0       	rjmp	.+14     	; 0x5ae <checkCMD+0x2e>
		case 0x1D: break;										//Report_Vendor_AT_Event
		case 0x1E: break;										//Read_Link_Status_Reply
		case 0x1F: break;										//Read_Paired_Device_Record_Reply
		case 0x20: break;										//Read_Local_BD_Address_Reply
		case 0x21: break;										//Read_Local_Device_Name_Reply
		case 0x22: parseCMD(); break;							//Report_SPP/iAP_Data
 5a0:	72 df       	rcall	.-284    	; 0x486 <parseCMD>
 5a2:	05 c0       	rjmp	.+10     	; 0x5ae <checkCMD+0x2e>
		case 0x24: break;										//REPORT_RING_TONE_STATUS
		case 0x25: break;										//User_Confrim_SSP_Req
		case 0x26: break;										//Report_AVRCP_Vol_Ctrl
		case 0x27: break;										//Report_Input_Signal_Level
		case 0x28: break;										//Report_iAP_Info
		case 0x29: setVolume(); break;							//REPORT_AVRCP_ABS_VOL_CTRL
 5a4:	16 de       	rcall	.-980    	; 0x1d2 <setVolume>
 5a6:	03 c0       	rjmp	.+6      	; 0x5ae <checkCMD+0x2e>
		case 0x40: break;										//Report_Read_Feature_List_Reply
		case 0x41: break;										//REPORT_TEST_RESULT_REPLY
		
		default:
		/* The default keyword specifies the code to run if there is no case match: */
		parameters.status = BTModule_misbehaving;				//BT Module misbehaving
 5a8:	85 e0       	ldi	r24, 0x05	; 5
 5aa:	80 93 1a 3e 	sts	0x3E1A, r24	; 0x803e1a <parameters+0x7>
		break;
	}

	readReset();
 5ae:	05 de       	rcall	.-1014   	; 0x1ba <readReset>
 5b0:	08 95       	ret

000005b2 <main>:
int timer2;

int main(void)
{
	
	read = (uint8_t*) calloc(32, sizeof(uint8_t));
 5b2:	61 e0       	ldi	r22, 0x01	; 1
 5b4:	70 e0       	ldi	r23, 0x00	; 0
 5b6:	80 e2       	ldi	r24, 0x20	; 32
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	02 d2       	rcall	.+1028   	; 0x9c0 <calloc>
 5bc:	fc 01       	movw	r30, r24
 5be:	80 93 09 3e 	sts	0x3E09, r24	; 0x803e09 <read>
 5c2:	90 93 0a 3e 	sts	0x3E0A, r25	; 0x803e0a <read+0x1>
	
	memoryAllocated = true;
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	80 93 07 3e 	sts	0x3E07, r24	; 0x803e07 <memoryAllocated>
	received = true;
 5cc:	80 93 08 3e 	sts	0x3E08, r24	; 0x803e08 <received>
	//run = true;
	
	read[0] = 0xAA;
 5d0:	9a ea       	ldi	r25, 0xAA	; 170
 5d2:	90 83       	st	Z, r25
	read[1] = 0x00;
 5d4:	11 82       	std	Z+1, r1	; 0x01
	read[2] = 0x0D; //total no of bytes -2
 5d6:	9d e0       	ldi	r25, 0x0D	; 13
 5d8:	92 83       	std	Z+2, r25	; 0x02
	read[3] = 0x22; //Event OPcode
 5da:	92 e2       	ldi	r25, 0x22	; 34
 5dc:	93 83       	std	Z+3, r25	; 0x03
	read[4] = 0x00; //channel index
 5de:	14 82       	std	Z+4, r1	; 0x04
	read[5] = 0x00; //packet type
 5e0:	15 82       	std	Z+5, r1	; 0x05
	read[6] = 0x00; //total lenght_H
 5e2:	16 82       	std	Z+6, r1	; 0x06
	read[7] = 0x05; //total lenght_L
 5e4:	95 e0       	ldi	r25, 0x05	; 5
 5e6:	97 83       	std	Z+7, r25	; 0x07
	read[8] = 0x00; //payload lenght_H
 5e8:	10 86       	std	Z+8, r1	; 0x08
	read[9] = 0x05; //payload lenght_H
 5ea:	91 87       	std	Z+9, r25	; 0x09
	/************************************************************************/
	/* CMD                                                                  */
	/************************************************************************/
	read[10] = 0x1F; //FLAGS
 5ec:	9f e1       	ldi	r25, 0x1F	; 31
 5ee:	92 87       	std	Z+10, r25	; 0x0a
	read[11] = 0x01; //CMD
 5f0:	83 87       	std	Z+11, r24	; 0x0b
	read[12] = 100; //RED LED INTENSTIY
 5f2:	84 e6       	ldi	r24, 0x64	; 100
 5f4:	84 87       	std	Z+12, r24	; 0x0c
	read[13] = 99; //GREEN LED INTENSTIY
 5f6:	83 e6       	ldi	r24, 0x63	; 99
 5f8:	85 87       	std	Z+13, r24	; 0x0d
	read[14] = 99; //BUE LED INTENSTIY
 5fa:	86 87       	std	Z+14, r24	; 0x0e
	read[15] = 97; //VIBRATION
 5fc:	81 e6       	ldi	r24, 0x61	; 97
 5fe:	87 87       	std	Z+15, r24	; 0x0f
	
	index_read = 16;
 600:	80 e1       	ldi	r24, 0x10	; 16
 602:	80 93 0b 3e 	sts	0x3E0B, r24	; 0x803e0b <index_read>
	
	read[index_read] = calculateChecksum(&read[1],&read[index_read-1]);
 606:	80 91 0b 3e 	lds	r24, 0x3E0B	; 0x803e0b <index_read>
 60a:	ef 01       	movw	r28, r30
 60c:	c8 0f       	add	r28, r24
 60e:	d1 1d       	adc	r29, r1
 610:	60 91 0b 3e 	lds	r22, 0x3E0B	; 0x803e0b <index_read>
 614:	70 e0       	ldi	r23, 0x00	; 0
 616:	61 50       	subi	r22, 0x01	; 1
 618:	71 09       	sbc	r23, r1
 61a:	6e 0f       	add	r22, r30
 61c:	7f 1f       	adc	r23, r31
 61e:	cf 01       	movw	r24, r30
 620:	01 96       	adiw	r24, 0x01	; 1
 622:	68 dd       	rcall	.-1328   	; 0xf4 <calculateChecksum>
 624:	88 83       	st	Y, r24
	
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	
	atmel_start_init();															//MCU initial configuration
 626:	64 dd       	rcall	.-1336   	; 0xf0 <atmel_start_init>

	PORTA_OUTCLR = PIN1_bm;
 628:	82 e0       	ldi	r24, 0x02	; 2
 62a:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__RODATA_PM_OFFSET__+0x7f8406>
	
	PORTB_OUTCLR = PIN0_bm | PIN1_bm | PIN2_bm;
 62e:	e6 e2       	ldi	r30, 0x26	; 38
 630:	f4 e0       	ldi	r31, 0x04	; 4
 632:	97 e0       	ldi	r25, 0x07	; 7
 634:	90 83       	st	Z, r25
	
	PORTB_OUTCLR = PIN1_bm;														//GND at pin PC1 for vibration motor testing
 636:	80 83       	st	Z, r24
	PWM_0_disable_output_ch0();													//initial RED LED turn OFF
 638:	e9 d0       	rcall	.+466    	; 0x80c <PWM_0_disable_output_ch0>
	PWM_0_disable_output_ch1();													//initial GREEN LED turn OFF
 63a:	ee d0       	rcall	.+476    	; 0x818 <PWM_0_disable_output_ch1>
	PWM_0_disable_output_ch2();													//initial BLUE LED turn OFF
 63c:	f9 d0       	rcall	.+498    	; 0x830 <PWM_0_disable_output_ch2>
	TCB0.CTRLA &= ~(1 << TCB_ENABLE_bp);										//initial turn OFF vibration
 63e:	e0 e4       	ldi	r30, 0x40	; 64
 640:	fa e0       	ldi	r31, 0x0A	; 10
 642:	80 81       	ld	r24, Z
 644:	8e 7f       	andi	r24, 0xFE	; 254
 646:	80 83       	st	Z, r24

	PORTA_PIN7CTRL |= PORT_ISC0_bm | PORT_ISC1_bm;								//PA7 interrupt enable - FALLING edge
 648:	e7 e1       	ldi	r30, 0x17	; 23
 64a:	f4 e0       	ldi	r31, 0x04	; 4
 64c:	80 81       	ld	r24, Z
 64e:	83 60       	ori	r24, 0x03	; 3
 650:	80 83       	st	Z, r24
	/*                                                                      */
	/************************************************************************/

	while (1)
	{
		if (received)															//Any received read to check and parse?
 652:	80 91 08 3e 	lds	r24, 0x3E08	; 0x803e08 <received>
 656:	88 23       	and	r24, r24
 658:	81 f0       	breq	.+32     	; 0x67a <main+0xc8>
		{
			//novyIndex = read[2] + 3;							//position of Checksum Byte
			if (read[read[2] + 3] > 0)									//Check checksum > 0
 65a:	e0 91 09 3e 	lds	r30, 0x3E09	; 0x803e09 <read>
 65e:	f0 91 0a 3e 	lds	r31, 0x3E0A	; 0x803e0a <read+0x1>
 662:	82 81       	ldd	r24, Z+2	; 0x02
 664:	e8 0f       	add	r30, r24
 666:	f1 1d       	adc	r31, r1
 668:	83 81       	ldd	r24, Z+3	; 0x03
 66a:	88 23       	and	r24, r24
 66c:	31 f0       	breq	.+12     	; 0x67a <main+0xc8>
			{
				
				if (checkCHKSUM())												//Is the checksum correct?
 66e:	8a dd       	rcall	.-1260   	; 0x184 <checkCHKSUM>
 670:	88 23       	and	r24, r24
 672:	11 f0       	breq	.+4      	; 0x678 <main+0xc6>
				{
					checkCMD();													//decode received CMD
 674:	85 df       	rcall	.-246    	; 0x580 <checkCMD>
 676:	01 c0       	rjmp	.+2      	; 0x67a <main+0xc8>
				}
				else
				{
					readReset();
 678:	a0 dd       	rcall	.-1216   	; 0x1ba <readReset>
			}
			

		}
		
		if (run)																//condition for powering effectors
 67a:	80 91 06 3e 	lds	r24, 0x3E06	; 0x803e06 <__data_end>
 67e:	88 23       	and	r24, r24
 680:	41 f3       	breq	.-48     	; 0x652 <main+0xa0>
		{
			execute();															//signalization mode execution
 682:	2b de       	rcall	.-938    	; 0x2da <execute>
			run = false;
 684:	10 92 06 3e 	sts	0x3E06, r1	; 0x803e06 <__data_end>
 688:	e4 cf       	rjmp	.-56     	; 0x652 <main+0xa0>

0000068a <ADC_0_init>:
 68a:	e0 e0       	ldi	r30, 0x00	; 0
 68c:	f6 e0       	ldi	r31, 0x06	; 6
 68e:	81 e0       	ldi	r24, 0x01	; 1
 690:	84 87       	std	Z+12, r24	; 0x0c
 692:	82 87       	std	Z+10, r24	; 0x0a
 694:	85 e0       	ldi	r24, 0x05	; 5
 696:	80 83       	st	Z, r24
 698:	80 e0       	ldi	r24, 0x00	; 0
 69a:	08 95       	ret

0000069c <__vector_17>:
 69c:	1f 92       	push	r1
 69e:	0f 92       	push	r0
 6a0:	0f b6       	in	r0, 0x3f	; 63
 6a2:	0f 92       	push	r0
 6a4:	11 24       	eor	r1, r1
 6a6:	2f 93       	push	r18
 6a8:	3f 93       	push	r19
 6aa:	4f 93       	push	r20
 6ac:	5f 93       	push	r21
 6ae:	6f 93       	push	r22
 6b0:	7f 93       	push	r23
 6b2:	8f 93       	push	r24
 6b4:	9f 93       	push	r25
 6b6:	af 93       	push	r26
 6b8:	bf 93       	push	r27
 6ba:	ef 93       	push	r30
 6bc:	ff 93       	push	r31
 6be:	e0 e0       	ldi	r30, 0x00	; 0
 6c0:	f6 e0       	ldi	r31, 0x06	; 6
 6c2:	83 85       	ldd	r24, Z+11	; 0x0b
 6c4:	81 60       	ori	r24, 0x01	; 1
 6c6:	83 87       	std	Z+11, r24	; 0x0b
 6c8:	e0 91 0c 3e 	lds	r30, 0x3E0C	; 0x803e0c <ADC_0_cb>
 6cc:	f0 91 0d 3e 	lds	r31, 0x3E0D	; 0x803e0d <ADC_0_cb+0x1>
 6d0:	30 97       	sbiw	r30, 0x00	; 0
 6d2:	09 f0       	breq	.+2      	; 0x6d6 <__vector_17+0x3a>
 6d4:	09 95       	icall
 6d6:	ff 91       	pop	r31
 6d8:	ef 91       	pop	r30
 6da:	bf 91       	pop	r27
 6dc:	af 91       	pop	r26
 6de:	9f 91       	pop	r25
 6e0:	8f 91       	pop	r24
 6e2:	7f 91       	pop	r23
 6e4:	6f 91       	pop	r22
 6e6:	5f 91       	pop	r21
 6e8:	4f 91       	pop	r20
 6ea:	3f 91       	pop	r19
 6ec:	2f 91       	pop	r18
 6ee:	0f 90       	pop	r0
 6f0:	0f be       	out	0x3f, r0	; 63
 6f2:	0f 90       	pop	r0
 6f4:	1f 90       	pop	r1
 6f6:	18 95       	reti

000006f8 <BOD_init>:
 6f8:	80 e0       	ldi	r24, 0x00	; 0
 6fa:	08 95       	ret

000006fc <CLKCTRL_init>:
 6fc:	80 e0       	ldi	r24, 0x00	; 0
 6fe:	08 95       	ret

00000700 <CPUINT_init>:
 700:	78 94       	sei
 702:	80 e0       	ldi	r24, 0x00	; 0
 704:	08 95       	ret

00000706 <DAC_0_init>:
 706:	81 e4       	ldi	r24, 0x41	; 65
 708:	80 93 80 06 	sts	0x0680, r24	; 0x800680 <__RODATA_PM_OFFSET__+0x7f8680>
 70c:	80 e0       	ldi	r24, 0x00	; 0
 70e:	08 95       	ret

00000710 <mcu_init>:
 710:	e0 e1       	ldi	r30, 0x10	; 16
 712:	f4 e0       	ldi	r31, 0x04	; 4
 714:	80 81       	ld	r24, Z
 716:	88 60       	ori	r24, 0x08	; 8
 718:	81 93       	st	Z+, r24
 71a:	e8 31       	cpi	r30, 0x18	; 24
 71c:	84 e0       	ldi	r24, 0x04	; 4
 71e:	f8 07       	cpc	r31, r24
 720:	c9 f7       	brne	.-14     	; 0x714 <mcu_init+0x4>
 722:	e0 e3       	ldi	r30, 0x30	; 48
 724:	f4 e0       	ldi	r31, 0x04	; 4
 726:	80 81       	ld	r24, Z
 728:	88 60       	ori	r24, 0x08	; 8
 72a:	81 93       	st	Z+, r24
 72c:	e8 33       	cpi	r30, 0x38	; 56
 72e:	84 e0       	ldi	r24, 0x04	; 4
 730:	f8 07       	cpc	r31, r24
 732:	c9 f7       	brne	.-14     	; 0x726 <mcu_init+0x16>
 734:	e0 e5       	ldi	r30, 0x50	; 80
 736:	f4 e0       	ldi	r31, 0x04	; 4
 738:	80 81       	ld	r24, Z
 73a:	88 60       	ori	r24, 0x08	; 8
 73c:	81 93       	st	Z+, r24
 73e:	e8 35       	cpi	r30, 0x58	; 88
 740:	84 e0       	ldi	r24, 0x04	; 4
 742:	f8 07       	cpc	r31, r24
 744:	c9 f7       	brne	.-14     	; 0x738 <mcu_init+0x28>
 746:	08 95       	ret

00000748 <ADC_0_initialization>:
 748:	e4 e1       	ldi	r30, 0x14	; 20
 74a:	f4 e0       	ldi	r31, 0x04	; 4
 74c:	80 81       	ld	r24, Z
 74e:	88 7f       	andi	r24, 0xF8	; 248
 750:	84 60       	ori	r24, 0x04	; 4
 752:	80 83       	st	Z, r24
 754:	80 81       	ld	r24, Z
 756:	87 7f       	andi	r24, 0xF7	; 247
 758:	80 83       	st	Z, r24
 75a:	e5 e1       	ldi	r30, 0x15	; 21
 75c:	f4 e0       	ldi	r31, 0x04	; 4
 75e:	80 81       	ld	r24, Z
 760:	88 7f       	andi	r24, 0xF8	; 248
 762:	84 60       	ori	r24, 0x04	; 4
 764:	80 83       	st	Z, r24
 766:	80 81       	ld	r24, Z
 768:	87 7f       	andi	r24, 0xF7	; 247
 76a:	80 83       	st	Z, r24
 76c:	8e df       	rcall	.-228    	; 0x68a <ADC_0_init>
 76e:	08 95       	ret

00000770 <USART_0_initialization>:
 770:	02 98       	cbi	0x00, 2	; 0
 772:	e2 e1       	ldi	r30, 0x12	; 18
 774:	f4 e0       	ldi	r31, 0x04	; 4
 776:	80 81       	ld	r24, Z
 778:	87 7f       	andi	r24, 0xF7	; 247
 77a:	80 83       	st	Z, r24
 77c:	e0 e0       	ldi	r30, 0x00	; 0
 77e:	f2 e0       	ldi	r31, 0x02	; 2
 780:	81 81       	ldd	r24, Z+1	; 0x01
 782:	81 60       	ori	r24, 0x01	; 1
 784:	81 83       	std	Z+1, r24	; 0x01
 786:	09 98       	cbi	0x01, 1	; 1
 788:	01 9a       	sbi	0x00, 1	; 0
 78a:	81 81       	ldd	r24, Z+1	; 0x01
 78c:	81 60       	ori	r24, 0x01	; 1
 78e:	81 83       	std	Z+1, r24	; 0x01
 790:	af d0       	rcall	.+350    	; 0x8f0 <USART_0_init>
 792:	08 95       	ret

00000794 <PWM_0_initialization>:
 794:	28 98       	cbi	0x05, 0	; 5
 796:	20 9a       	sbi	0x04, 0	; 4
 798:	29 98       	cbi	0x05, 1	; 5
 79a:	21 9a       	sbi	0x04, 1	; 4
 79c:	2a 98       	cbi	0x05, 2	; 5
 79e:	22 9a       	sbi	0x04, 2	; 4
 7a0:	26 d0       	rcall	.+76     	; 0x7ee <PWM_0_init>
 7a2:	08 95       	ret

000007a4 <PWM_1_initialization>:
 7a4:	48 98       	cbi	0x09, 0	; 9
 7a6:	40 9a       	sbi	0x08, 0	; 8
 7a8:	e0 e0       	ldi	r30, 0x00	; 0
 7aa:	f2 e0       	ldi	r31, 0x02	; 2
 7ac:	83 81       	ldd	r24, Z+3	; 0x03
 7ae:	81 60       	ori	r24, 0x01	; 1
 7b0:	83 83       	std	Z+3, r24	; 0x03
 7b2:	7b d0       	rcall	.+246    	; 0x8aa <PWM_1_init>
 7b4:	08 95       	ret

000007b6 <DAC_0_initialization>:
 7b6:	e6 e1       	ldi	r30, 0x16	; 22
 7b8:	f4 e0       	ldi	r31, 0x04	; 4
 7ba:	80 81       	ld	r24, Z
 7bc:	88 7f       	andi	r24, 0xF8	; 248
 7be:	84 60       	ori	r24, 0x04	; 4
 7c0:	80 83       	st	Z, r24
 7c2:	80 81       	ld	r24, Z
 7c4:	87 7f       	andi	r24, 0xF7	; 247
 7c6:	80 83       	st	Z, r24
 7c8:	9e df       	rcall	.-196    	; 0x706 <DAC_0_init>
 7ca:	08 95       	ret

000007cc <system_init>:
 7cc:	a1 df       	rcall	.-190    	; 0x710 <mcu_init>
 7ce:	96 df       	rcall	.-212    	; 0x6fc <CLKCTRL_init>
 7d0:	58 d0       	rcall	.+176    	; 0x882 <RTC_init>
 7d2:	ba df       	rcall	.-140    	; 0x748 <ADC_0_initialization>
 7d4:	cd df       	rcall	.-102    	; 0x770 <USART_0_initialization>
 7d6:	de df       	rcall	.-68     	; 0x794 <PWM_0_initialization>
 7d8:	e5 df       	rcall	.-54     	; 0x7a4 <PWM_1_initialization>
 7da:	71 d0       	rcall	.+226    	; 0x8be <TIMER_0_init>
 7dc:	ec df       	rcall	.-40     	; 0x7b6 <DAC_0_initialization>
 7de:	90 df       	rcall	.-224    	; 0x700 <CPUINT_init>
 7e0:	62 d0       	rcall	.+196    	; 0x8a6 <SLPCTRL_init>
 7e2:	8a df       	rcall	.-236    	; 0x6f8 <BOD_init>
 7e4:	08 95       	ret

000007e6 <protected_write_io>:
 7e6:	fc 01       	movw	r30, r24
 7e8:	64 bf       	out	0x34, r22	; 52
 7ea:	40 83       	st	Z, r20
 7ec:	08 95       	ret

000007ee <PWM_0_init>:
 7ee:	e0 e0       	ldi	r30, 0x00	; 0
 7f0:	fa e0       	ldi	r31, 0x0A	; 10
 7f2:	83 e7       	ldi	r24, 0x73	; 115
 7f4:	81 83       	std	Z+1, r24	; 0x01
 7f6:	81 e0       	ldi	r24, 0x01	; 1
 7f8:	86 87       	std	Z+14, r24	; 0x0e
 7fa:	80 83       	st	Z, r24
 7fc:	80 e0       	ldi	r24, 0x00	; 0
 7fe:	08 95       	ret

00000800 <PWM_0_enable_output_ch0>:
 800:	e0 e0       	ldi	r30, 0x00	; 0
 802:	fa e0       	ldi	r31, 0x0A	; 10
 804:	81 81       	ldd	r24, Z+1	; 0x01
 806:	80 61       	ori	r24, 0x10	; 16
 808:	81 83       	std	Z+1, r24	; 0x01
 80a:	08 95       	ret

0000080c <PWM_0_disable_output_ch0>:
 80c:	e0 e0       	ldi	r30, 0x00	; 0
 80e:	fa e0       	ldi	r31, 0x0A	; 10
 810:	81 81       	ldd	r24, Z+1	; 0x01
 812:	8f 7e       	andi	r24, 0xEF	; 239
 814:	81 83       	std	Z+1, r24	; 0x01
 816:	08 95       	ret

00000818 <PWM_0_disable_output_ch1>:
 818:	e0 e0       	ldi	r30, 0x00	; 0
 81a:	fa e0       	ldi	r31, 0x0A	; 10
 81c:	81 81       	ldd	r24, Z+1	; 0x01
 81e:	8f 7d       	andi	r24, 0xDF	; 223
 820:	81 83       	std	Z+1, r24	; 0x01
 822:	08 95       	ret

00000824 <PWM_0_enable_output_ch2>:
 824:	e0 e0       	ldi	r30, 0x00	; 0
 826:	fa e0       	ldi	r31, 0x0A	; 10
 828:	81 81       	ldd	r24, Z+1	; 0x01
 82a:	80 64       	ori	r24, 0x40	; 64
 82c:	81 83       	std	Z+1, r24	; 0x01
 82e:	08 95       	ret

00000830 <PWM_0_disable_output_ch2>:
 830:	e0 e0       	ldi	r30, 0x00	; 0
 832:	fa e0       	ldi	r31, 0x0A	; 10
 834:	81 81       	ldd	r24, Z+1	; 0x01
 836:	8f 7b       	andi	r24, 0xBF	; 191
 838:	81 83       	std	Z+1, r24	; 0x01
 83a:	08 95       	ret

0000083c <PWM_0_load_duty_cycle_ch0>:
 83c:	80 93 38 0a 	sts	0x0A38, r24	; 0x800a38 <__RODATA_PM_OFFSET__+0x7f8a38>
 840:	90 93 39 0a 	sts	0x0A39, r25	; 0x800a39 <__RODATA_PM_OFFSET__+0x7f8a39>
 844:	08 95       	ret

00000846 <PWM_0_load_duty_cycle_ch1>:
 846:	80 93 3a 0a 	sts	0x0A3A, r24	; 0x800a3a <__RODATA_PM_OFFSET__+0x7f8a3a>
 84a:	90 93 3b 0a 	sts	0x0A3B, r25	; 0x800a3b <__RODATA_PM_OFFSET__+0x7f8a3b>
 84e:	08 95       	ret

00000850 <PWM_0_load_duty_cycle_ch2>:
 850:	80 93 3c 0a 	sts	0x0A3C, r24	; 0x800a3c <__RODATA_PM_OFFSET__+0x7f8a3c>
 854:	90 93 3d 0a 	sts	0x0A3D, r25	; 0x800a3d <__RODATA_PM_OFFSET__+0x7f8a3d>
 858:	08 95       	ret

0000085a <__vector_8>:
 85a:	1f 92       	push	r1
 85c:	0f 92       	push	r0
 85e:	0f b6       	in	r0, 0x3f	; 63
 860:	0f 92       	push	r0
 862:	11 24       	eor	r1, r1
 864:	8f 93       	push	r24
 866:	81 e0       	ldi	r24, 0x01	; 1
 868:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__RODATA_PM_OFFSET__+0x7f8a0b>
 86c:	80 91 0e 3e 	lds	r24, 0x3E0E	; 0x803e0e <callback_count.3348>
 870:	8f 5f       	subi	r24, 0xFF	; 255
 872:	80 93 0e 3e 	sts	0x3E0E, r24	; 0x803e0e <callback_count.3348>
 876:	8f 91       	pop	r24
 878:	0f 90       	pop	r0
 87a:	0f be       	out	0x3f, r0	; 63
 87c:	0f 90       	pop	r0
 87e:	1f 90       	pop	r1
 880:	18 95       	reti

00000882 <RTC_init>:
 882:	e0 e4       	ldi	r30, 0x40	; 64
 884:	f1 e0       	ldi	r31, 0x01	; 1
 886:	81 81       	ldd	r24, Z+1	; 0x01
 888:	81 11       	cpse	r24, r1
 88a:	fd cf       	rjmp	.-6      	; 0x886 <RTC_init+0x4>
 88c:	e0 e4       	ldi	r30, 0x40	; 64
 88e:	f1 e0       	ldi	r31, 0x01	; 1
 890:	8f ef       	ldi	r24, 0xFF	; 255
 892:	9f e7       	ldi	r25, 0x7F	; 127
 894:	80 87       	std	Z+8, r24	; 0x08
 896:	91 87       	std	Z+9, r25	; 0x09
 898:	81 e0       	ldi	r24, 0x01	; 1
 89a:	80 83       	st	Z, r24
 89c:	85 83       	std	Z+5, r24	; 0x05
 89e:	82 e0       	ldi	r24, 0x02	; 2
 8a0:	82 83       	std	Z+2, r24	; 0x02
 8a2:	80 e0       	ldi	r24, 0x00	; 0
 8a4:	08 95       	ret

000008a6 <SLPCTRL_init>:
 8a6:	80 e0       	ldi	r24, 0x00	; 0
 8a8:	08 95       	ret

000008aa <PWM_1_init>:
 8aa:	e0 e4       	ldi	r30, 0x40	; 64
 8ac:	fa e0       	ldi	r31, 0x0A	; 10
 8ae:	87 e1       	ldi	r24, 0x17	; 23
 8b0:	81 83       	std	Z+1, r24	; 0x01
 8b2:	81 e0       	ldi	r24, 0x01	; 1
 8b4:	80 87       	std	Z+8, r24	; 0x08
 8b6:	85 83       	std	Z+5, r24	; 0x05
 8b8:	80 83       	st	Z, r24
 8ba:	80 e0       	ldi	r24, 0x00	; 0
 8bc:	08 95       	ret

000008be <TIMER_0_init>:
 8be:	cf 93       	push	r28
 8c0:	df 93       	push	r29
 8c2:	c0 e8       	ldi	r28, 0x80	; 128
 8c4:	da e0       	ldi	r29, 0x0A	; 10
 8c6:	81 e0       	ldi	r24, 0x01	; 1
 8c8:	8e 8f       	std	Y+30, r24	; 0x1e
 8ca:	43 e3       	ldi	r20, 0x33	; 51
 8cc:	68 ed       	ldi	r22, 0xD8	; 216
 8ce:	82 e9       	ldi	r24, 0x92	; 146
 8d0:	9a e0       	ldi	r25, 0x0A	; 10
 8d2:	89 df       	rcall	.-238    	; 0x7e6 <protected_write_io>
 8d4:	8c e0       	ldi	r24, 0x0C	; 12
 8d6:	8c 87       	std	Y+12, r24	; 0x0c
 8d8:	e0 e8       	ldi	r30, 0x80	; 128
 8da:	fa e0       	ldi	r31, 0x0A	; 10
 8dc:	86 85       	ldd	r24, Z+14	; 0x0e
 8de:	80 ff       	sbrs	r24, 0
 8e0:	fd cf       	rjmp	.-6      	; 0x8dc <TIMER_0_init+0x1e>
 8e2:	81 e0       	ldi	r24, 0x01	; 1
 8e4:	80 93 80 0a 	sts	0x0A80, r24	; 0x800a80 <__RODATA_PM_OFFSET__+0x7f8a80>
 8e8:	80 e0       	ldi	r24, 0x00	; 0
 8ea:	df 91       	pop	r29
 8ec:	cf 91       	pop	r28
 8ee:	08 95       	ret

000008f0 <USART_0_init>:
 8f0:	e0 e0       	ldi	r30, 0x00	; 0
 8f2:	f8 e0       	ldi	r31, 0x08	; 8
 8f4:	84 e7       	ldi	r24, 0x74	; 116
 8f6:	90 e0       	ldi	r25, 0x00	; 0
 8f8:	80 87       	std	Z+8, r24	; 0x08
 8fa:	91 87       	std	Z+9, r25	; 0x09
 8fc:	80 e8       	ldi	r24, 0x80	; 128
 8fe:	85 83       	std	Z+5, r24	; 0x05
 900:	80 ec       	ldi	r24, 0xC0	; 192
 902:	86 83       	std	Z+6, r24	; 0x06
 904:	81 e0       	ldi	r24, 0x01	; 1
 906:	83 87       	std	Z+11, r24	; 0x0b
 908:	80 e0       	ldi	r24, 0x00	; 0
 90a:	08 95       	ret

0000090c <USART_0_read>:
 90c:	e0 e0       	ldi	r30, 0x00	; 0
 90e:	f8 e0       	ldi	r31, 0x08	; 8
 910:	84 81       	ldd	r24, Z+4	; 0x04
 912:	88 23       	and	r24, r24
 914:	ec f7       	brge	.-6      	; 0x910 <USART_0_read+0x4>
 916:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__RODATA_PM_OFFSET__+0x7f8800>
 91a:	08 95       	ret

0000091c <USART_0_write>:
 91c:	e0 e0       	ldi	r30, 0x00	; 0
 91e:	f8 e0       	ldi	r31, 0x08	; 8
 920:	94 81       	ldd	r25, Z+4	; 0x04
 922:	95 ff       	sbrs	r25, 5
 924:	fd cf       	rjmp	.-6      	; 0x920 <USART_0_write+0x4>
 926:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__RODATA_PM_OFFSET__+0x7f8802>
 92a:	08 95       	ret

0000092c <__divmodsi4>:
 92c:	05 2e       	mov	r0, r21
 92e:	97 fb       	bst	r25, 7
 930:	16 f4       	brtc	.+4      	; 0x936 <__divmodsi4+0xa>
 932:	00 94       	com	r0
 934:	0f d0       	rcall	.+30     	; 0x954 <__negsi2>
 936:	57 fd       	sbrc	r21, 7
 938:	05 d0       	rcall	.+10     	; 0x944 <__divmodsi4_neg2>
 93a:	20 d0       	rcall	.+64     	; 0x97c <__udivmodsi4>
 93c:	07 fc       	sbrc	r0, 7
 93e:	02 d0       	rcall	.+4      	; 0x944 <__divmodsi4_neg2>
 940:	46 f4       	brtc	.+16     	; 0x952 <__divmodsi4_exit>
 942:	08 c0       	rjmp	.+16     	; 0x954 <__negsi2>

00000944 <__divmodsi4_neg2>:
 944:	50 95       	com	r21
 946:	40 95       	com	r20
 948:	30 95       	com	r19
 94a:	21 95       	neg	r18
 94c:	3f 4f       	sbci	r19, 0xFF	; 255
 94e:	4f 4f       	sbci	r20, 0xFF	; 255
 950:	5f 4f       	sbci	r21, 0xFF	; 255

00000952 <__divmodsi4_exit>:
 952:	08 95       	ret

00000954 <__negsi2>:
 954:	90 95       	com	r25
 956:	80 95       	com	r24
 958:	70 95       	com	r23
 95a:	61 95       	neg	r22
 95c:	7f 4f       	sbci	r23, 0xFF	; 255
 95e:	8f 4f       	sbci	r24, 0xFF	; 255
 960:	9f 4f       	sbci	r25, 0xFF	; 255
 962:	08 95       	ret

00000964 <__umulhisi3>:
 964:	a2 9f       	mul	r26, r18
 966:	b0 01       	movw	r22, r0
 968:	b3 9f       	mul	r27, r19
 96a:	c0 01       	movw	r24, r0
 96c:	a3 9f       	mul	r26, r19
 96e:	01 d0       	rcall	.+2      	; 0x972 <__umulhisi3+0xe>
 970:	b2 9f       	mul	r27, r18
 972:	70 0d       	add	r23, r0
 974:	81 1d       	adc	r24, r1
 976:	11 24       	eor	r1, r1
 978:	91 1d       	adc	r25, r1
 97a:	08 95       	ret

0000097c <__udivmodsi4>:
 97c:	a1 e2       	ldi	r26, 0x21	; 33
 97e:	1a 2e       	mov	r1, r26
 980:	aa 1b       	sub	r26, r26
 982:	bb 1b       	sub	r27, r27
 984:	fd 01       	movw	r30, r26
 986:	0d c0       	rjmp	.+26     	; 0x9a2 <__udivmodsi4_ep>

00000988 <__udivmodsi4_loop>:
 988:	aa 1f       	adc	r26, r26
 98a:	bb 1f       	adc	r27, r27
 98c:	ee 1f       	adc	r30, r30
 98e:	ff 1f       	adc	r31, r31
 990:	a2 17       	cp	r26, r18
 992:	b3 07       	cpc	r27, r19
 994:	e4 07       	cpc	r30, r20
 996:	f5 07       	cpc	r31, r21
 998:	20 f0       	brcs	.+8      	; 0x9a2 <__udivmodsi4_ep>
 99a:	a2 1b       	sub	r26, r18
 99c:	b3 0b       	sbc	r27, r19
 99e:	e4 0b       	sbc	r30, r20
 9a0:	f5 0b       	sbc	r31, r21

000009a2 <__udivmodsi4_ep>:
 9a2:	66 1f       	adc	r22, r22
 9a4:	77 1f       	adc	r23, r23
 9a6:	88 1f       	adc	r24, r24
 9a8:	99 1f       	adc	r25, r25
 9aa:	1a 94       	dec	r1
 9ac:	69 f7       	brne	.-38     	; 0x988 <__udivmodsi4_loop>
 9ae:	60 95       	com	r22
 9b0:	70 95       	com	r23
 9b2:	80 95       	com	r24
 9b4:	90 95       	com	r25
 9b6:	9b 01       	movw	r18, r22
 9b8:	ac 01       	movw	r20, r24
 9ba:	bd 01       	movw	r22, r26
 9bc:	cf 01       	movw	r24, r30
 9be:	08 95       	ret

000009c0 <calloc>:
 9c0:	0f 93       	push	r16
 9c2:	1f 93       	push	r17
 9c4:	cf 93       	push	r28
 9c6:	df 93       	push	r29
 9c8:	86 9f       	mul	r24, r22
 9ca:	80 01       	movw	r16, r0
 9cc:	87 9f       	mul	r24, r23
 9ce:	10 0d       	add	r17, r0
 9d0:	96 9f       	mul	r25, r22
 9d2:	10 0d       	add	r17, r0
 9d4:	11 24       	eor	r1, r1
 9d6:	c8 01       	movw	r24, r16
 9d8:	0d d0       	rcall	.+26     	; 0x9f4 <malloc>
 9da:	ec 01       	movw	r28, r24
 9dc:	00 97       	sbiw	r24, 0x00	; 0
 9de:	21 f0       	breq	.+8      	; 0x9e8 <calloc+0x28>
 9e0:	a8 01       	movw	r20, r16
 9e2:	60 e0       	ldi	r22, 0x00	; 0
 9e4:	70 e0       	ldi	r23, 0x00	; 0
 9e6:	27 d1       	rcall	.+590    	; 0xc36 <memset>
 9e8:	ce 01       	movw	r24, r28
 9ea:	df 91       	pop	r29
 9ec:	cf 91       	pop	r28
 9ee:	1f 91       	pop	r17
 9f0:	0f 91       	pop	r16
 9f2:	08 95       	ret

000009f4 <malloc>:
 9f4:	0f 93       	push	r16
 9f6:	1f 93       	push	r17
 9f8:	cf 93       	push	r28
 9fa:	df 93       	push	r29
 9fc:	82 30       	cpi	r24, 0x02	; 2
 9fe:	91 05       	cpc	r25, r1
 a00:	10 f4       	brcc	.+4      	; 0xa06 <malloc+0x12>
 a02:	82 e0       	ldi	r24, 0x02	; 2
 a04:	90 e0       	ldi	r25, 0x00	; 0
 a06:	e0 91 1f 3e 	lds	r30, 0x3E1F	; 0x803e1f <__flp>
 a0a:	f0 91 20 3e 	lds	r31, 0x3E20	; 0x803e20 <__flp+0x1>
 a0e:	20 e0       	ldi	r18, 0x00	; 0
 a10:	30 e0       	ldi	r19, 0x00	; 0
 a12:	a0 e0       	ldi	r26, 0x00	; 0
 a14:	b0 e0       	ldi	r27, 0x00	; 0
 a16:	30 97       	sbiw	r30, 0x00	; 0
 a18:	19 f1       	breq	.+70     	; 0xa60 <malloc+0x6c>
 a1a:	40 81       	ld	r20, Z
 a1c:	51 81       	ldd	r21, Z+1	; 0x01
 a1e:	02 81       	ldd	r16, Z+2	; 0x02
 a20:	13 81       	ldd	r17, Z+3	; 0x03
 a22:	48 17       	cp	r20, r24
 a24:	59 07       	cpc	r21, r25
 a26:	c8 f0       	brcs	.+50     	; 0xa5a <malloc+0x66>
 a28:	84 17       	cp	r24, r20
 a2a:	95 07       	cpc	r25, r21
 a2c:	69 f4       	brne	.+26     	; 0xa48 <malloc+0x54>
 a2e:	10 97       	sbiw	r26, 0x00	; 0
 a30:	31 f0       	breq	.+12     	; 0xa3e <malloc+0x4a>
 a32:	12 96       	adiw	r26, 0x02	; 2
 a34:	0c 93       	st	X, r16
 a36:	12 97       	sbiw	r26, 0x02	; 2
 a38:	13 96       	adiw	r26, 0x03	; 3
 a3a:	1c 93       	st	X, r17
 a3c:	27 c0       	rjmp	.+78     	; 0xa8c <malloc+0x98>
 a3e:	00 93 1f 3e 	sts	0x3E1F, r16	; 0x803e1f <__flp>
 a42:	10 93 20 3e 	sts	0x3E20, r17	; 0x803e20 <__flp+0x1>
 a46:	22 c0       	rjmp	.+68     	; 0xa8c <malloc+0x98>
 a48:	21 15       	cp	r18, r1
 a4a:	31 05       	cpc	r19, r1
 a4c:	19 f0       	breq	.+6      	; 0xa54 <malloc+0x60>
 a4e:	42 17       	cp	r20, r18
 a50:	53 07       	cpc	r21, r19
 a52:	18 f4       	brcc	.+6      	; 0xa5a <malloc+0x66>
 a54:	9a 01       	movw	r18, r20
 a56:	bd 01       	movw	r22, r26
 a58:	ef 01       	movw	r28, r30
 a5a:	df 01       	movw	r26, r30
 a5c:	f8 01       	movw	r30, r16
 a5e:	db cf       	rjmp	.-74     	; 0xa16 <malloc+0x22>
 a60:	21 15       	cp	r18, r1
 a62:	31 05       	cpc	r19, r1
 a64:	f9 f0       	breq	.+62     	; 0xaa4 <malloc+0xb0>
 a66:	28 1b       	sub	r18, r24
 a68:	39 0b       	sbc	r19, r25
 a6a:	24 30       	cpi	r18, 0x04	; 4
 a6c:	31 05       	cpc	r19, r1
 a6e:	80 f4       	brcc	.+32     	; 0xa90 <malloc+0x9c>
 a70:	8a 81       	ldd	r24, Y+2	; 0x02
 a72:	9b 81       	ldd	r25, Y+3	; 0x03
 a74:	61 15       	cp	r22, r1
 a76:	71 05       	cpc	r23, r1
 a78:	21 f0       	breq	.+8      	; 0xa82 <malloc+0x8e>
 a7a:	fb 01       	movw	r30, r22
 a7c:	82 83       	std	Z+2, r24	; 0x02
 a7e:	93 83       	std	Z+3, r25	; 0x03
 a80:	04 c0       	rjmp	.+8      	; 0xa8a <malloc+0x96>
 a82:	80 93 1f 3e 	sts	0x3E1F, r24	; 0x803e1f <__flp>
 a86:	90 93 20 3e 	sts	0x3E20, r25	; 0x803e20 <__flp+0x1>
 a8a:	fe 01       	movw	r30, r28
 a8c:	32 96       	adiw	r30, 0x02	; 2
 a8e:	44 c0       	rjmp	.+136    	; 0xb18 <malloc+0x124>
 a90:	fe 01       	movw	r30, r28
 a92:	e2 0f       	add	r30, r18
 a94:	f3 1f       	adc	r31, r19
 a96:	81 93       	st	Z+, r24
 a98:	91 93       	st	Z+, r25
 a9a:	22 50       	subi	r18, 0x02	; 2
 a9c:	31 09       	sbc	r19, r1
 a9e:	28 83       	st	Y, r18
 aa0:	39 83       	std	Y+1, r19	; 0x01
 aa2:	3a c0       	rjmp	.+116    	; 0xb18 <malloc+0x124>
 aa4:	20 91 1d 3e 	lds	r18, 0x3E1D	; 0x803e1d <__brkval>
 aa8:	30 91 1e 3e 	lds	r19, 0x3E1E	; 0x803e1e <__brkval+0x1>
 aac:	23 2b       	or	r18, r19
 aae:	41 f4       	brne	.+16     	; 0xac0 <malloc+0xcc>
 ab0:	20 91 02 3e 	lds	r18, 0x3E02	; 0x803e02 <__malloc_heap_start>
 ab4:	30 91 03 3e 	lds	r19, 0x3E03	; 0x803e03 <__malloc_heap_start+0x1>
 ab8:	20 93 1d 3e 	sts	0x3E1D, r18	; 0x803e1d <__brkval>
 abc:	30 93 1e 3e 	sts	0x3E1E, r19	; 0x803e1e <__brkval+0x1>
 ac0:	20 91 00 3e 	lds	r18, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
 ac4:	30 91 01 3e 	lds	r19, 0x3E01	; 0x803e01 <__DATA_REGION_ORIGIN__+0x1>
 ac8:	21 15       	cp	r18, r1
 aca:	31 05       	cpc	r19, r1
 acc:	41 f4       	brne	.+16     	; 0xade <malloc+0xea>
 ace:	2d b7       	in	r18, 0x3d	; 61
 ad0:	3e b7       	in	r19, 0x3e	; 62
 ad2:	40 91 04 3e 	lds	r20, 0x3E04	; 0x803e04 <__malloc_margin>
 ad6:	50 91 05 3e 	lds	r21, 0x3E05	; 0x803e05 <__malloc_margin+0x1>
 ada:	24 1b       	sub	r18, r20
 adc:	35 0b       	sbc	r19, r21
 ade:	e0 91 1d 3e 	lds	r30, 0x3E1D	; 0x803e1d <__brkval>
 ae2:	f0 91 1e 3e 	lds	r31, 0x3E1E	; 0x803e1e <__brkval+0x1>
 ae6:	e2 17       	cp	r30, r18
 ae8:	f3 07       	cpc	r31, r19
 aea:	a0 f4       	brcc	.+40     	; 0xb14 <malloc+0x120>
 aec:	2e 1b       	sub	r18, r30
 aee:	3f 0b       	sbc	r19, r31
 af0:	28 17       	cp	r18, r24
 af2:	39 07       	cpc	r19, r25
 af4:	78 f0       	brcs	.+30     	; 0xb14 <malloc+0x120>
 af6:	ac 01       	movw	r20, r24
 af8:	4e 5f       	subi	r20, 0xFE	; 254
 afa:	5f 4f       	sbci	r21, 0xFF	; 255
 afc:	24 17       	cp	r18, r20
 afe:	35 07       	cpc	r19, r21
 b00:	48 f0       	brcs	.+18     	; 0xb14 <malloc+0x120>
 b02:	4e 0f       	add	r20, r30
 b04:	5f 1f       	adc	r21, r31
 b06:	40 93 1d 3e 	sts	0x3E1D, r20	; 0x803e1d <__brkval>
 b0a:	50 93 1e 3e 	sts	0x3E1E, r21	; 0x803e1e <__brkval+0x1>
 b0e:	81 93       	st	Z+, r24
 b10:	91 93       	st	Z+, r25
 b12:	02 c0       	rjmp	.+4      	; 0xb18 <malloc+0x124>
 b14:	e0 e0       	ldi	r30, 0x00	; 0
 b16:	f0 e0       	ldi	r31, 0x00	; 0
 b18:	cf 01       	movw	r24, r30
 b1a:	df 91       	pop	r29
 b1c:	cf 91       	pop	r28
 b1e:	1f 91       	pop	r17
 b20:	0f 91       	pop	r16
 b22:	08 95       	ret

00000b24 <free>:
 b24:	cf 93       	push	r28
 b26:	df 93       	push	r29
 b28:	00 97       	sbiw	r24, 0x00	; 0
 b2a:	09 f4       	brne	.+2      	; 0xb2e <free+0xa>
 b2c:	81 c0       	rjmp	.+258    	; 0xc30 <free+0x10c>
 b2e:	fc 01       	movw	r30, r24
 b30:	32 97       	sbiw	r30, 0x02	; 2
 b32:	12 82       	std	Z+2, r1	; 0x02
 b34:	13 82       	std	Z+3, r1	; 0x03
 b36:	a0 91 1f 3e 	lds	r26, 0x3E1F	; 0x803e1f <__flp>
 b3a:	b0 91 20 3e 	lds	r27, 0x3E20	; 0x803e20 <__flp+0x1>
 b3e:	10 97       	sbiw	r26, 0x00	; 0
 b40:	81 f4       	brne	.+32     	; 0xb62 <free+0x3e>
 b42:	20 81       	ld	r18, Z
 b44:	31 81       	ldd	r19, Z+1	; 0x01
 b46:	82 0f       	add	r24, r18
 b48:	93 1f       	adc	r25, r19
 b4a:	20 91 1d 3e 	lds	r18, 0x3E1D	; 0x803e1d <__brkval>
 b4e:	30 91 1e 3e 	lds	r19, 0x3E1E	; 0x803e1e <__brkval+0x1>
 b52:	28 17       	cp	r18, r24
 b54:	39 07       	cpc	r19, r25
 b56:	51 f5       	brne	.+84     	; 0xbac <free+0x88>
 b58:	e0 93 1d 3e 	sts	0x3E1D, r30	; 0x803e1d <__brkval>
 b5c:	f0 93 1e 3e 	sts	0x3E1E, r31	; 0x803e1e <__brkval+0x1>
 b60:	67 c0       	rjmp	.+206    	; 0xc30 <free+0x10c>
 b62:	ed 01       	movw	r28, r26
 b64:	20 e0       	ldi	r18, 0x00	; 0
 b66:	30 e0       	ldi	r19, 0x00	; 0
 b68:	ce 17       	cp	r28, r30
 b6a:	df 07       	cpc	r29, r31
 b6c:	40 f4       	brcc	.+16     	; 0xb7e <free+0x5a>
 b6e:	4a 81       	ldd	r20, Y+2	; 0x02
 b70:	5b 81       	ldd	r21, Y+3	; 0x03
 b72:	9e 01       	movw	r18, r28
 b74:	41 15       	cp	r20, r1
 b76:	51 05       	cpc	r21, r1
 b78:	f1 f0       	breq	.+60     	; 0xbb6 <free+0x92>
 b7a:	ea 01       	movw	r28, r20
 b7c:	f5 cf       	rjmp	.-22     	; 0xb68 <free+0x44>
 b7e:	c2 83       	std	Z+2, r28	; 0x02
 b80:	d3 83       	std	Z+3, r29	; 0x03
 b82:	40 81       	ld	r20, Z
 b84:	51 81       	ldd	r21, Z+1	; 0x01
 b86:	84 0f       	add	r24, r20
 b88:	95 1f       	adc	r25, r21
 b8a:	c8 17       	cp	r28, r24
 b8c:	d9 07       	cpc	r29, r25
 b8e:	59 f4       	brne	.+22     	; 0xba6 <free+0x82>
 b90:	88 81       	ld	r24, Y
 b92:	99 81       	ldd	r25, Y+1	; 0x01
 b94:	84 0f       	add	r24, r20
 b96:	95 1f       	adc	r25, r21
 b98:	02 96       	adiw	r24, 0x02	; 2
 b9a:	80 83       	st	Z, r24
 b9c:	91 83       	std	Z+1, r25	; 0x01
 b9e:	8a 81       	ldd	r24, Y+2	; 0x02
 ba0:	9b 81       	ldd	r25, Y+3	; 0x03
 ba2:	82 83       	std	Z+2, r24	; 0x02
 ba4:	93 83       	std	Z+3, r25	; 0x03
 ba6:	21 15       	cp	r18, r1
 ba8:	31 05       	cpc	r19, r1
 baa:	29 f4       	brne	.+10     	; 0xbb6 <free+0x92>
 bac:	e0 93 1f 3e 	sts	0x3E1F, r30	; 0x803e1f <__flp>
 bb0:	f0 93 20 3e 	sts	0x3E20, r31	; 0x803e20 <__flp+0x1>
 bb4:	3d c0       	rjmp	.+122    	; 0xc30 <free+0x10c>
 bb6:	e9 01       	movw	r28, r18
 bb8:	ea 83       	std	Y+2, r30	; 0x02
 bba:	fb 83       	std	Y+3, r31	; 0x03
 bbc:	49 91       	ld	r20, Y+
 bbe:	59 91       	ld	r21, Y+
 bc0:	c4 0f       	add	r28, r20
 bc2:	d5 1f       	adc	r29, r21
 bc4:	ec 17       	cp	r30, r28
 bc6:	fd 07       	cpc	r31, r29
 bc8:	61 f4       	brne	.+24     	; 0xbe2 <free+0xbe>
 bca:	80 81       	ld	r24, Z
 bcc:	91 81       	ldd	r25, Z+1	; 0x01
 bce:	84 0f       	add	r24, r20
 bd0:	95 1f       	adc	r25, r21
 bd2:	02 96       	adiw	r24, 0x02	; 2
 bd4:	e9 01       	movw	r28, r18
 bd6:	88 83       	st	Y, r24
 bd8:	99 83       	std	Y+1, r25	; 0x01
 bda:	82 81       	ldd	r24, Z+2	; 0x02
 bdc:	93 81       	ldd	r25, Z+3	; 0x03
 bde:	8a 83       	std	Y+2, r24	; 0x02
 be0:	9b 83       	std	Y+3, r25	; 0x03
 be2:	e0 e0       	ldi	r30, 0x00	; 0
 be4:	f0 e0       	ldi	r31, 0x00	; 0
 be6:	12 96       	adiw	r26, 0x02	; 2
 be8:	8d 91       	ld	r24, X+
 bea:	9c 91       	ld	r25, X
 bec:	13 97       	sbiw	r26, 0x03	; 3
 bee:	00 97       	sbiw	r24, 0x00	; 0
 bf0:	19 f0       	breq	.+6      	; 0xbf8 <free+0xd4>
 bf2:	fd 01       	movw	r30, r26
 bf4:	dc 01       	movw	r26, r24
 bf6:	f7 cf       	rjmp	.-18     	; 0xbe6 <free+0xc2>
 bf8:	8d 91       	ld	r24, X+
 bfa:	9c 91       	ld	r25, X
 bfc:	11 97       	sbiw	r26, 0x01	; 1
 bfe:	9d 01       	movw	r18, r26
 c00:	2e 5f       	subi	r18, 0xFE	; 254
 c02:	3f 4f       	sbci	r19, 0xFF	; 255
 c04:	82 0f       	add	r24, r18
 c06:	93 1f       	adc	r25, r19
 c08:	20 91 1d 3e 	lds	r18, 0x3E1D	; 0x803e1d <__brkval>
 c0c:	30 91 1e 3e 	lds	r19, 0x3E1E	; 0x803e1e <__brkval+0x1>
 c10:	28 17       	cp	r18, r24
 c12:	39 07       	cpc	r19, r25
 c14:	69 f4       	brne	.+26     	; 0xc30 <free+0x10c>
 c16:	30 97       	sbiw	r30, 0x00	; 0
 c18:	29 f4       	brne	.+10     	; 0xc24 <free+0x100>
 c1a:	10 92 1f 3e 	sts	0x3E1F, r1	; 0x803e1f <__flp>
 c1e:	10 92 20 3e 	sts	0x3E20, r1	; 0x803e20 <__flp+0x1>
 c22:	02 c0       	rjmp	.+4      	; 0xc28 <free+0x104>
 c24:	12 82       	std	Z+2, r1	; 0x02
 c26:	13 82       	std	Z+3, r1	; 0x03
 c28:	a0 93 1d 3e 	sts	0x3E1D, r26	; 0x803e1d <__brkval>
 c2c:	b0 93 1e 3e 	sts	0x3E1E, r27	; 0x803e1e <__brkval+0x1>
 c30:	df 91       	pop	r29
 c32:	cf 91       	pop	r28
 c34:	08 95       	ret

00000c36 <memset>:
 c36:	dc 01       	movw	r26, r24
 c38:	01 c0       	rjmp	.+2      	; 0xc3c <memset+0x6>
 c3a:	6d 93       	st	X+, r22
 c3c:	41 50       	subi	r20, 0x01	; 1
 c3e:	50 40       	sbci	r21, 0x00	; 0
 c40:	e0 f7       	brcc	.-8      	; 0xc3a <memset+0x4>
 c42:	08 95       	ret

00000c44 <_exit>:
 c44:	f8 94       	cli

00000c46 <__stop_program>:
 c46:	ff cf       	rjmp	.-2      	; 0xc46 <__stop_program>
